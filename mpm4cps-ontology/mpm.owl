<?xml version="1.0"?>
<Ontology xmlns="http://www.w3.org/2002/07/owl#"
     xml:base="http://mpm4cps.eu/ontology/mpm"
     xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
     xmlns:xml="http://www.w3.org/XML/1998/namespace"
     xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
     xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
     ontologyIRI="http://mpm4cps.eu/ontology/mpm">
    <Prefix name="" IRI="http://mpm4cps.eu/ontology/mpm"/>
    <Prefix name="owl" IRI="http://www.w3.org/2002/07/owl#"/>
    <Prefix name="rdf" IRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#"/>
    <Prefix name="xml" IRI="http://www.w3.org/XML/1998/namespace"/>
    <Prefix name="xsd" IRI="http://www.w3.org/2001/XMLSchema#"/>
    <Prefix name="rdfs" IRI="http://www.w3.org/2000/01/rdf-schema#"/>
    <Import>http://mpm4cps.eu/ontology/shared</Import>
    <Annotation>
        <AnnotationProperty IRI="http://mpm4cps.eu/ontology/shared#mpm4cps:author"/>
        <Literal>Dominique Blouin; Hana Mkaouar</Literal>
    </Annotation>
    <Annotation>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <Literal>This ontology captures the Multi-Paradigm Modeling Domain (MPM). It includes concepts for the related modeling, linguistic and formal sub domains.</Literal>
    </Annotation>
    <Declaration>
        <Class IRI="#AbstractSyntax"/>
    </Declaration>
    <Declaration>
        <Class IRI="#AnalysisTool"/>
    </Declaration>
    <Declaration>
        <Class IRI="#ApplicationMegaModel"/>
    </Declaration>
    <Declaration>
        <Class IRI="#ArchitectureDescriptionLanguage"/>
    </Declaration>
    <Declaration>
        <Class IRI="#AutomataBasedFormalism"/>
    </Declaration>
    <Declaration>
        <Class IRI="#Behavioral"/>
    </Declaration>
    <Declaration>
        <Class IRI="#BehavioralCharacteristic"/>
    </Declaration>
    <Declaration>
        <Class IRI="#CapturingOperation"/>
    </Declaration>
    <Declaration>
        <Class IRI="#Communication"/>
    </Declaration>
    <Declaration>
        <Class IRI="#ConcreteModelingLanguage"/>
    </Declaration>
    <Declaration>
        <Class IRI="#ConcreteSyntax"/>
    </Declaration>
    <Declaration>
        <Class IRI="#ConfigurationMegaModel"/>
    </Declaration>
    <Declaration>
        <Class IRI="#ConformanceRelation"/>
    </Declaration>
    <Declaration>
        <Class IRI="#ContinuousCharacteristic"/>
    </Declaration>
    <Declaration>
        <Class IRI="#DiscreteCharacteristic"/>
    </Declaration>
    <Declaration>
        <Class IRI="#DomainSpecificLanguage"/>
    </Declaration>
    <Declaration>
        <Class IRI="#ExecutionTool"/>
    </Declaration>
    <Declaration>
        <Class IRI="#FlowBasedFormalism"/>
    </Declaration>
    <Declaration>
        <Class IRI="#FormalLanguage"/>
    </Declaration>
    <Declaration>
        <Class IRI="#FormalSemantics"/>
    </Declaration>
    <Declaration>
        <Class IRI="#Formalism"/>
    </Declaration>
    <Declaration>
        <Class IRI="#FormalismCharacteristic"/>
    </Declaration>
    <Declaration>
        <Class IRI="#FormalismDC"/>
    </Declaration>
    <Declaration>
        <Class IRI="#GraphicalSyntax"/>
    </Declaration>
    <Declaration>
        <Class IRI="#HybridAutomataBasedFormalism"/>
    </Declaration>
    <Declaration>
        <Class IRI="#LogicBasedFormalism"/>
    </Declaration>
    <Declaration>
        <Class IRI="#Megamodel"/>
    </Declaration>
    <Declaration>
        <Class IRI="#MegamodelFragment"/>
    </Declaration>
    <Declaration>
        <Class IRI="#Metamodel"/>
    </Declaration>
    <Declaration>
        <Class IRI="#MicroModelElement"/>
    </Declaration>
    <Declaration>
        <Class IRI="#Micromodel"/>
    </Declaration>
    <Declaration>
        <Class IRI="#Model"/>
    </Declaration>
    <Declaration>
        <Class IRI="#ModelRelation"/>
    </Declaration>
    <Declaration>
        <Class IRI="#ModelingDC"/>
    </Declaration>
    <Declaration>
        <Class IRI="#ModelingLanguage"/>
    </Declaration>
    <Declaration>
        <Class IRI="#ModelingParadigm"/>
    </Declaration>
    <Declaration>
        <Class IRI="#ModelingTool"/>
    </Declaration>
    <Declaration>
        <Class IRI="#PetriNetBasedFormalism"/>
    </Declaration>
    <Declaration>
        <Class IRI="#ProgrammingLanguage"/>
    </Declaration>
    <Declaration>
        <Class IRI="#RefinementRelation"/>
    </Declaration>
    <Declaration>
        <Class IRI="#RuntimeTool"/>
    </Declaration>
    <Declaration>
        <Class IRI="#SemanticDomain"/>
    </Declaration>
    <Declaration>
        <Class IRI="#SemanticMappingRelation"/>
    </Declaration>
    <Declaration>
        <Class IRI="#SimulationTool"/>
    </Declaration>
    <Declaration>
        <Class IRI="#Structural"/>
    </Declaration>
    <Declaration>
        <Class IRI="#StructuralConstraintLanguage"/>
    </Declaration>
    <Declaration>
        <Class IRI="#StructureCharacteristic"/>
    </Declaration>
    <Declaration>
        <Class IRI="#SynchronizationRelation"/>
    </Declaration>
    <Declaration>
        <Class IRI="#SyntaxMappingRelation"/>
    </Declaration>
    <Declaration>
        <Class IRI="#TextualSyntax"/>
    </Declaration>
    <Declaration>
        <Class IRI="#TimedAutomataBasedFormalism"/>
    </Declaration>
    <Declaration>
        <Class IRI="#TimedCharacteristic"/>
    </Declaration>
    <Declaration>
        <Class IRI="#TraceabilityModel"/>
    </Declaration>
    <Declaration>
        <Class IRI="#TraceabilityRelation"/>
    </Declaration>
    <Declaration>
        <Class IRI="#TransformationLanguage"/>
    </Declaration>
    <Declaration>
        <Class IRI="#TransformationRelation"/>
    </Declaration>
    <Declaration>
        <Class IRI="#TransformationTool"/>
    </Declaration>
    <Declaration>
        <Class IRI="#TranslationalSemantics"/>
    </Declaration>
    <Declaration>
        <Class IRI="#UncertaintyCharacteristic"/>
    </Declaration>
    <Declaration>
        <Class IRI="#VisualizationTool"/>
    </Declaration>
    <Declaration>
        <ObjectProperty IRI="#hasAbstractSyntax"/>
    </Declaration>
    <Declaration>
        <ObjectProperty IRI="#hasAbstractSyntaxSem"/>
    </Declaration>
    <Declaration>
        <ObjectProperty IRI="#hasCharacteristic"/>
    </Declaration>
    <Declaration>
        <ObjectProperty IRI="#hasConcreteSyntax"/>
    </Declaration>
    <Declaration>
        <ObjectProperty IRI="#hasConformedModel"/>
    </Declaration>
    <Declaration>
        <ObjectProperty IRI="#hasConnectedModel"/>
    </Declaration>
    <Declaration>
        <ObjectProperty IRI="#hasContainedMegamodelFragments"/>
    </Declaration>
    <Declaration>
        <ObjectProperty IRI="#hasContainedModelElements"/>
    </Declaration>
    <Declaration>
        <ObjectProperty IRI="#hasContainedModelRelations"/>
    </Declaration>
    <Declaration>
        <ObjectProperty IRI="#hasContainedModels"/>
    </Declaration>
    <Declaration>
        <ObjectProperty IRI="#hasContextRelation"/>
    </Declaration>
    <Declaration>
        <ObjectProperty IRI="#hasInputModel"/>
    </Declaration>
    <Declaration>
        <ObjectProperty IRI="#hasLanguage"/>
    </Declaration>
    <Declaration>
        <ObjectProperty IRI="#hasMetamodel"/>
    </Declaration>
    <Declaration>
        <ObjectProperty IRI="#hasModelOperation"/>
    </Declaration>
    <Declaration>
        <ObjectProperty IRI="#hasModelRelation"/>
    </Declaration>
    <Declaration>
        <ObjectProperty IRI="#hasOutputModel"/>
    </Declaration>
    <Declaration>
        <ObjectProperty IRI="#hasSemanticDomain"/>
    </Declaration>
    <Declaration>
        <ObjectProperty IRI="#hasSpecification"/>
    </Declaration>
    <Declaration>
        <ObjectProperty IRI="#hasSyntaxMapping"/>
    </Declaration>
    <Declaration>
        <ObjectProperty IRI="#hasTraceabilityRelation"/>
    </Declaration>
    <Declaration>
        <ObjectProperty IRI="#hasTranformationSpecification"/>
    </Declaration>
    <Declaration>
        <ObjectProperty IRI="#isBasedOnFormalism"/>
    </Declaration>
    <Declaration>
        <NamedIndividual IRI="#AutomatonLikeFamily"/>
    </Declaration>
    <Declaration>
        <NamedIndividual IRI="#FlowFormalismsFamily"/>
    </Declaration>
    <Declaration>
        <NamedIndividual IRI="#HybridAutomatonLike"/>
    </Declaration>
    <Declaration>
        <NamedIndividual IRI="#TimedAutomatonLike"/>
    </Declaration>
    <EquivalentClasses>
        <Class IRI="#Megamodel"/>
        <ObjectIntersectionOf>
            <Class IRI="#Model"/>
            <ObjectSomeValuesFrom>
                <ObjectProperty IRI="#hasContainedModels"/>
                <ObjectIntersectionOf>
                    <Class IRI="#Model"/>
                    <ObjectComplementOf>
                        <Class IRI="#MicroModelElement"/>
                    </ObjectComplementOf>
                </ObjectIntersectionOf>
            </ObjectSomeValuesFrom>
        </ObjectIntersectionOf>
    </EquivalentClasses>
    <EquivalentClasses>
        <Class IRI="#Micromodel"/>
        <ObjectIntersectionOf>
            <Class IRI="#Model"/>
            <ObjectAllValuesFrom>
                <ObjectProperty IRI="#hasContainedModels"/>
                <Class IRI="#MicroModelElement"/>
            </ObjectAllValuesFrom>
        </ObjectIntersectionOf>
    </EquivalentClasses>
    <SubClassOf>
        <Class IRI="#AbstractSyntax"/>
        <Class IRI="#Model"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#AbstractSyntax"/>
        <Class IRI="http://mpm4cps.eu/ontology/shared#Syntax"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#AnalysisTool"/>
        <Class IRI="#ModelingTool"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#ApplicationMegaModel"/>
        <Class IRI="#Megamodel"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#ArchitectureDescriptionLanguage"/>
        <Class IRI="#ModelingLanguage"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#AutomataBasedFormalism"/>
        <Class IRI="#Formalism"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#Behavioral"/>
        <Class IRI="#ArchitectureDescriptionLanguage"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#BehavioralCharacteristic"/>
        <Class IRI="#FormalismCharacteristic"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#CapturingOperation"/>
        <Class IRI="#TransformationLanguage"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#Communication"/>
        <Class IRI="#ArchitectureDescriptionLanguage"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#ConcreteModelingLanguage"/>
        <Class IRI="#ModelingLanguage"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#ConcreteSyntax"/>
        <Class IRI="#Model"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#ConcreteSyntax"/>
        <Class IRI="http://mpm4cps.eu/ontology/shared#Syntax"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#ConfigurationMegaModel"/>
        <Class IRI="#Megamodel"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#ConformanceRelation"/>
        <Class IRI="#ModelRelation"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#ContinuousCharacteristic"/>
        <Class IRI="#BehavioralCharacteristic"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#DiscreteCharacteristic"/>
        <Class IRI="#BehavioralCharacteristic"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#DomainSpecificLanguage"/>
        <Class IRI="#ModelingLanguage"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#ExecutionTool"/>
        <Class IRI="#ModelingTool"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#FlowBasedFormalism"/>
        <Class IRI="#Formalism"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#FormalLanguage"/>
        <Class IRI="#ModelingLanguage"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#FormalSemantics"/>
        <Class IRI="http://mpm4cps.eu/ontology/shared#Semantics"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#Formalism"/>
        <Class IRI="#FormalismDC"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#Formalism"/>
        <Class IRI="#Model"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#FormalismCharacteristic"/>
        <Class IRI="#FormalismDC"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#FormalismDC"/>
        <Class IRI="#ModelingDC"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#GraphicalSyntax"/>
        <Class IRI="#ConcreteSyntax"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#HybridAutomataBasedFormalism"/>
        <Class IRI="#AutomataBasedFormalism"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#LogicBasedFormalism"/>
        <Class IRI="#Formalism"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#MegamodelFragment"/>
        <Class IRI="#Model"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#Metamodel"/>
        <Class IRI="#Model"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#MicroModelElement"/>
        <Class IRI="#Model"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#Model"/>
        <Class IRI="#ModelingDC"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#ModelRelation"/>
        <Class IRI="#ModelingDC"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#ModelRelation"/>
        <ObjectSomeValuesFrom>
            <ObjectProperty IRI="#hasConnectedModel"/>
            <Class IRI="#Model"/>
        </ObjectSomeValuesFrom>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#ModelingDC"/>
        <Class IRI="http://mpm4cps.eu/ontology/shared#DomainConcept"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#ModelingLanguage"/>
        <Class IRI="#Model"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#ModelingLanguage"/>
        <Class IRI="http://mpm4cps.eu/ontology/shared#Language"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#ModelingParadigm"/>
        <Class IRI="#ModelingDC"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#ModelingTool"/>
        <Class IRI="#Model"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#ModelingTool"/>
        <Class IRI="http://mpm4cps.eu/ontology/shared#Tool"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#PetriNetBasedFormalism"/>
        <Class IRI="#Formalism"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#ProgrammingLanguage"/>
        <Class IRI="#ModelingLanguage"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#RefinementRelation"/>
        <Class IRI="#TransformationRelation"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#RuntimeTool"/>
        <Class IRI="#ModelingTool"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#SemanticDomain"/>
        <Class IRI="#Model"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#SemanticMappingRelation"/>
        <Class IRI="#ModelRelation"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#SimulationTool"/>
        <Class IRI="#ModelingTool"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#Structural"/>
        <Class IRI="#ArchitectureDescriptionLanguage"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#StructuralConstraintLanguage"/>
        <Class IRI="#ModelingLanguage"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#StructureCharacteristic"/>
        <Class IRI="#FormalismCharacteristic"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#SynchronizationRelation"/>
        <Class IRI="#TransformationRelation"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#SyntaxMappingRelation"/>
        <Class IRI="#ModelRelation"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#TextualSyntax"/>
        <Class IRI="#ConcreteSyntax"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#TimedAutomataBasedFormalism"/>
        <Class IRI="#HybridAutomataBasedFormalism"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#TimedCharacteristic"/>
        <Class IRI="#BehavioralCharacteristic"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#TraceabilityModel"/>
        <Class IRI="#Micromodel"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#TraceabilityRelation"/>
        <Class IRI="#ModelRelation"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#TransformationLanguage"/>
        <Class IRI="#ModelingLanguage"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#TransformationRelation"/>
        <Class IRI="#ModelRelation"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#TransformationTool"/>
        <Class IRI="#ModelingTool"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#TranslationalSemantics"/>
        <Class IRI="http://mpm4cps.eu/ontology/shared#Semantics"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#UncertaintyCharacteristic"/>
        <Class IRI="#BehavioralCharacteristic"/>
    </SubClassOf>
    <SubClassOf>
        <Class IRI="#VisualizationTool"/>
        <Class IRI="#ModelingTool"/>
    </SubClassOf>
    <DisjointClasses>
        <Class IRI="#ApplicationMegaModel"/>
        <Class IRI="#ConfigurationMegaModel"/>
    </DisjointClasses>
    <SubObjectPropertyOf>
        <ObjectProperty IRI="#hasAbstractSyntax"/>
        <ObjectProperty IRI="http://mpm4cps.eu/ontology/shared#hasSyntax"/>
    </SubObjectPropertyOf>
    <SubObjectPropertyOf>
        <ObjectProperty IRI="#hasAbstractSyntaxSem"/>
        <ObjectProperty IRI="#hasConnectedModel"/>
    </SubObjectPropertyOf>
    <SubObjectPropertyOf>
        <ObjectProperty IRI="#hasConformedModel"/>
        <ObjectProperty IRI="#hasConnectedModel"/>
    </SubObjectPropertyOf>
    <SubObjectPropertyOf>
        <ObjectProperty IRI="#hasContainedMegamodelFragments"/>
        <ObjectProperty IRI="#hasContainedModels"/>
    </SubObjectPropertyOf>
    <SubObjectPropertyOf>
        <ObjectProperty IRI="#hasContainedModelElements"/>
        <ObjectProperty IRI="#hasContainedModels"/>
    </SubObjectPropertyOf>
    <SubObjectPropertyOf>
        <ObjectProperty IRI="#hasMetamodel"/>
        <ObjectProperty IRI="#hasConnectedModel"/>
    </SubObjectPropertyOf>
    <SubObjectPropertyOf>
        <ObjectProperty IRI="#hasModelOperation"/>
        <ObjectProperty IRI="#hasModelRelation"/>
    </SubObjectPropertyOf>
    <SubObjectPropertyOf>
        <ObjectProperty IRI="#hasSemanticDomain"/>
        <ObjectProperty IRI="#hasConnectedModel"/>
    </SubObjectPropertyOf>
    <SubObjectPropertyOf>
        <ObjectProperty IRI="#hasTraceabilityRelation"/>
        <ObjectProperty IRI="#hasContainedModelRelations"/>
    </SubObjectPropertyOf>
    <InverseObjectProperties>
        <ObjectProperty IRI="#hasConnectedModel"/>
        <ObjectProperty IRI="#hasModelRelation"/>
    </InverseObjectProperties>
    <InverseObjectProperties>
        <ObjectProperty IRI="#hasInputModel"/>
        <ObjectProperty IRI="#hasModelRelation"/>
    </InverseObjectProperties>
    <InverseObjectProperties>
        <ObjectProperty IRI="#hasLanguage"/>
        <ObjectProperty IRI="#isBasedOnFormalism"/>
    </InverseObjectProperties>
    <InverseObjectProperties>
        <ObjectProperty IRI="#hasModelRelation"/>
        <ObjectProperty IRI="#hasOutputModel"/>
    </InverseObjectProperties>
    <ObjectPropertyDomain>
        <ObjectProperty IRI="#hasAbstractSyntax"/>
        <Class IRI="#ModelingLanguage"/>
    </ObjectPropertyDomain>
    <ObjectPropertyDomain>
        <ObjectProperty IRI="#hasAbstractSyntaxSem"/>
        <Class IRI="#SemanticMappingRelation"/>
    </ObjectPropertyDomain>
    <ObjectPropertyDomain>
        <ObjectProperty IRI="#hasCharacteristic"/>
        <Class IRI="#Formalism"/>
    </ObjectPropertyDomain>
    <ObjectPropertyDomain>
        <ObjectProperty IRI="#hasConcreteSyntax"/>
        <Class IRI="#SyntaxMappingRelation"/>
    </ObjectPropertyDomain>
    <ObjectPropertyDomain>
        <ObjectProperty IRI="#hasConformedModel"/>
        <Class IRI="#ConformanceRelation"/>
    </ObjectPropertyDomain>
    <ObjectPropertyDomain>
        <ObjectProperty IRI="#hasConnectedModel"/>
        <Class IRI="#ModelRelation"/>
    </ObjectPropertyDomain>
    <ObjectPropertyDomain>
        <ObjectProperty IRI="#hasContainedMegamodelFragments"/>
        <Class IRI="#Megamodel"/>
    </ObjectPropertyDomain>
    <ObjectPropertyDomain>
        <ObjectProperty IRI="#hasContainedModelElements"/>
        <Class IRI="#Micromodel"/>
    </ObjectPropertyDomain>
    <ObjectPropertyDomain>
        <ObjectProperty IRI="#hasContainedModelRelations"/>
        <Class IRI="#Model"/>
    </ObjectPropertyDomain>
    <ObjectPropertyDomain>
        <ObjectProperty IRI="#hasContainedModels"/>
        <Class IRI="#Model"/>
    </ObjectPropertyDomain>
    <ObjectPropertyDomain>
        <ObjectProperty IRI="#hasContextRelation"/>
        <Class IRI="#ModelRelation"/>
    </ObjectPropertyDomain>
    <ObjectPropertyDomain>
        <ObjectProperty IRI="#hasInputModel"/>
        <Class IRI="#ModelRelation"/>
    </ObjectPropertyDomain>
    <ObjectPropertyDomain>
        <ObjectProperty IRI="#hasLanguage"/>
        <Class IRI="#Formalism"/>
    </ObjectPropertyDomain>
    <ObjectPropertyDomain>
        <ObjectProperty IRI="#hasLanguage"/>
        <Class IRI="#ModelingTool"/>
    </ObjectPropertyDomain>
    <ObjectPropertyDomain>
        <ObjectProperty IRI="#hasMetamodel"/>
        <Class IRI="#ConformanceRelation"/>
    </ObjectPropertyDomain>
    <ObjectPropertyDomain>
        <ObjectProperty IRI="#hasModelOperation"/>
        <Class IRI="#Model"/>
    </ObjectPropertyDomain>
    <ObjectPropertyDomain>
        <ObjectProperty IRI="#hasModelRelation"/>
        <Class IRI="#Model"/>
    </ObjectPropertyDomain>
    <ObjectPropertyDomain>
        <ObjectProperty IRI="#hasOutputModel"/>
        <Class IRI="#ModelRelation"/>
    </ObjectPropertyDomain>
    <ObjectPropertyDomain>
        <ObjectProperty IRI="#hasSemanticDomain"/>
        <Class IRI="#SemanticMappingRelation"/>
    </ObjectPropertyDomain>
    <ObjectPropertyDomain>
        <ObjectProperty IRI="#hasSpecification"/>
        <Class IRI="#TransformationRelation"/>
    </ObjectPropertyDomain>
    <ObjectPropertyDomain>
        <ObjectProperty IRI="#hasSyntaxMapping"/>
        <Class IRI="#ConcreteModelingLanguage"/>
    </ObjectPropertyDomain>
    <ObjectPropertyDomain>
        <ObjectProperty IRI="#hasTraceabilityRelation"/>
        <Class IRI="#TraceabilityModel"/>
    </ObjectPropertyDomain>
    <ObjectPropertyDomain>
        <ObjectProperty IRI="#hasTranformationSpecification"/>
        <Class IRI="http://mpm4cps.eu/ontology/shared#ActivityPerformer"/>
    </ObjectPropertyDomain>
    <ObjectPropertyRange>
        <ObjectProperty IRI="#hasAbstractSyntax"/>
        <Class IRI="#AbstractSyntax"/>
    </ObjectPropertyRange>
    <ObjectPropertyRange>
        <ObjectProperty IRI="#hasAbstractSyntaxSem"/>
        <Class IRI="#AbstractSyntax"/>
    </ObjectPropertyRange>
    <ObjectPropertyRange>
        <ObjectProperty IRI="#hasCharacteristic"/>
        <Class IRI="#FormalismCharacteristic"/>
    </ObjectPropertyRange>
    <ObjectPropertyRange>
        <ObjectProperty IRI="#hasConcreteSyntax"/>
        <Class IRI="#ConcreteSyntax"/>
    </ObjectPropertyRange>
    <ObjectPropertyRange>
        <ObjectProperty IRI="#hasConformedModel"/>
        <Class IRI="#Micromodel"/>
    </ObjectPropertyRange>
    <ObjectPropertyRange>
        <ObjectProperty IRI="#hasConnectedModel"/>
        <Class IRI="#Model"/>
    </ObjectPropertyRange>
    <ObjectPropertyRange>
        <ObjectProperty IRI="#hasContainedMegamodelFragments"/>
        <Class IRI="#MegamodelFragment"/>
    </ObjectPropertyRange>
    <ObjectPropertyRange>
        <ObjectProperty IRI="#hasContainedModelElements"/>
        <Class IRI="#MicroModelElement"/>
    </ObjectPropertyRange>
    <ObjectPropertyRange>
        <ObjectProperty IRI="#hasContainedModelRelations"/>
        <Class IRI="#ModelRelation"/>
    </ObjectPropertyRange>
    <ObjectPropertyRange>
        <ObjectProperty IRI="#hasContainedModels"/>
        <Class IRI="#Micromodel"/>
    </ObjectPropertyRange>
    <ObjectPropertyRange>
        <ObjectProperty IRI="#hasContextRelation"/>
        <Class IRI="#ModelRelation"/>
    </ObjectPropertyRange>
    <ObjectPropertyRange>
        <ObjectProperty IRI="#hasInputModel"/>
        <Class IRI="#Model"/>
    </ObjectPropertyRange>
    <ObjectPropertyRange>
        <ObjectProperty IRI="#hasMetamodel"/>
        <Class IRI="#Metamodel"/>
    </ObjectPropertyRange>
    <ObjectPropertyRange>
        <ObjectProperty IRI="#hasModelRelation"/>
        <Class IRI="#ModelRelation"/>
    </ObjectPropertyRange>
    <ObjectPropertyRange>
        <ObjectProperty IRI="#hasOutputModel"/>
        <Class IRI="#Model"/>
    </ObjectPropertyRange>
    <ObjectPropertyRange>
        <ObjectProperty IRI="#hasSemanticDomain"/>
        <Class IRI="#SemanticDomain"/>
    </ObjectPropertyRange>
    <ObjectPropertyRange>
        <ObjectProperty IRI="#hasSpecification"/>
        <Class IRI="#Micromodel"/>
    </ObjectPropertyRange>
    <ObjectPropertyRange>
        <ObjectProperty IRI="#hasSyntaxMapping"/>
        <Class IRI="#SyntaxMappingRelation"/>
    </ObjectPropertyRange>
    <ObjectPropertyRange>
        <ObjectProperty IRI="#hasTraceabilityRelation"/>
        <Class IRI="#TraceabilityRelation"/>
    </ObjectPropertyRange>
    <ObjectPropertyRange>
        <ObjectProperty IRI="#hasTranformationSpecification"/>
        <Class IRI="#TransformationRelation"/>
    </ObjectPropertyRange>
    <ObjectPropertyRange>
        <ObjectProperty IRI="#isBasedOnFormalism"/>
        <Class IRI="#Formalism"/>
    </ObjectPropertyRange>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#AbstractSyntax</IRI>
        <Literal>An abstract syntax is a syntax that only captures the essence of a language (its concepts and the relations between them) independently from the notation users will employ to manipulate models of the language. An abstract syntax is equivalent to the Abstract Syntax Trees (ASTs) into which code of programming languages are transformed during compilation</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#AnalysisTool</IRI>
        <Literal>Tools to analysis systems e.g. performance, resourceConsumption, schedulability ....</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty IRI="http://mpm4cps.eu/ontology/shared#mpm4cps:website"/>
        <IRI>#ApplicationMegaModel</IRI>
        <Literal>https://publishup.uni-potsdam.de/opus4-ubp/frontdoor/index/index/docId/6234</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#ApplicationMegaModel</IRI>
        <Literal>A representation of the real models in the CPS development environment.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty IRI="http://mpm4cps.eu/ontology/shared#mpm4cps:paper"/>
        <IRI>#ArchitectureDescriptionLanguage</IRI>
        <Literal>D. E. Perry and A. L. Wolf. Foundations for the study of software archi-
tecture. ACM SIGSOFT Software engineering notes, 17(4):40–52, 1992.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty IRI="http://mpm4cps.eu/ontology/shared#mpm4cps:paper"/>
        <IRI>#ArchitectureDescriptionLanguage</IRI>
        <Literal>ISO/IEC/IEEE 42010: Systems and software engineering–architecture description. Technical report, ISO/IEC/IEEE, 2011.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty IRI="http://mpm4cps.eu/ontology/shared#mpm4cps:paper"/>
        <IRI>#ArchitectureDescriptionLanguage</IRI>
        <Literal>M. Ozkaya. The analysis of architectural languages for the needs of practitioners. Software: Practice and Experience, 48(5):985–1018, 2018.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#ArchitectureDescriptionLanguage</IRI>
        <Literal>The notion of software architecture has been proposed, since the early 1990s by Perry and Wolf, as a software system representation composed of a set
of components with their interactions and their constraints. 
A software architecture is designed using an architectural language (may also be referred to as ADL (Architectural Description Language)), which is generally defined as any form of expression for use in architecture descriptions, according to the ISO/IEC/IEEE standard.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#AutomataBasedFormalism</IRI>
        <Literal>The class of formalisms that are based on automata</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:label"/>
        <IRI>#AutomataBasedFormalism</IRI>
        <Literal>Automata-based Formalisms</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty IRI="http://mpm4cps.eu/ontology/shared#mpm4cps:toBeReviewed"/>
        <IRI>#Behavioral</IRI>
        <Literal></Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#Behavioral</IRI>
        <Literal>Behavioral</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#BehavioralCharacteristic</IRI>
        <Literal>Behavioral.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty IRI="http://mpm4cps.eu/ontology/shared#mpm4cps:toBeReviewed"/>
        <IRI>#CapturingOperation</IRI>
        <Literal></Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#CapturingOperation</IRI>
        <Literal>Capturing Operation</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty IRI="http://mpm4cps.eu/ontology/shared#mpm4cps:toBeReviewed"/>
        <IRI>#Communication</IRI>
        <Literal></Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#Communication</IRI>
        <Literal>Communication</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty IRI="http://mpm4cps.eu/ontology/shared#mpm4cps:paper"/>
        <IRI>#ConcreteModelingLanguage</IRI>
        <Literal>Holger Giese, Tihamer Levendovszky, and Hans Vangheluwe, editors.
Summary of the Workshop on Multi-Modelling Paradigms: Concepts and Tools, 2006.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#ConcreteModelingLanguage</IRI>
        <Literal>The notion of concrete language is defined as a language that“comprises both an abstract syntax and a concrete syntax mapping function k ”.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#ConcreteSyntax</IRI>
        <Literal>A concrete syntax is the syntax users of the language manipulate to build models of the language. A modeling language may have several concrete syntaxes such as textual and graphical ones to improve its usability.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty IRI="http://mpm4cps.eu/ontology/shared#mpm4cps:website"/>
        <IRI>#ConfigurationMegaModel</IRI>
        <Literal>https://publishup.uni-potsdam.de/opus4-ubp/frontdoor/index/index/docId/6234</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#ConfigurationMegaModel</IRI>
        <Literal>Declares types for the models and relations contained in application megamodel. (language and relation types)</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#ConformanceRelation</IRI>
        <Literal>A ConformanceRelation is a subclass of the ModelRelation to relate  a Metamodel with its conforming MicroModel(s).</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#ContinuousCharacteristic</IRI>
        <Literal>Continuous Characteristic.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#DiscreteCharacteristic</IRI>
        <Literal>Discrete Characteristic</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#DomainSpecificLanguage</IRI>
        <Literal>The DSLs are specialized languages which capture the concepts of a specific domain.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#ExecutionTool</IRI>
        <Literal>Execution Tool</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#FlowBasedFormalism</IRI>
        <Literal>Flow-based Formalisms</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#FormalLanguage</IRI>
        <Literal>A modeling language is said to be formal if it is based on a well-defined semantics using mathematical foundations.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty IRI="http://mpm4cps.eu/ontology/shared#mpm4cps:toBeUpdated"/>
        <IRI>#Formalism</IRI>
        <Literal>To be reformulated as this is the same text as Bronan</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty IRI="http://mpm4cps.eu/ontology/shared#mpm4cps:website"/>
        <IRI>#Formalism</IRI>
        <Literal>https://en.wikipedia.org/wiki/Formalism_(philosophy_of_mathematics)</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#Formalism</IRI>
        <Literal>Formalisms are mathematical objects consisting of an abstract
syntax and a formal semantics. Languages are concrete
implementations of formalisms. A language has a concrete
syntax, may deviate slightly from the formalism in the
semantics that it implements, or may implement multiple
semantics (e.g., changing the type of numerical solver in a
simulation tool may change the behavior of a model). Also, a
language may implement more than one formalisms.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:seeAlso"/>
        <IRI>#Formalism</IRI>
        <Literal>key:Broman2012</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#FormalismCharacteristic</IRI>
        <Literal>Formalism characteristic.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#FormalismDC</IRI>
        <Literal>This class groups classes related to formalisms</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#GraphicalSyntax</IRI>
        <Literal>Graphical syntax display sentences of the language as visual elements such as boxes and arrows.
However pure graphical syntax are not common and often include textual parts.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#HybridAutomataBasedFormalism</IRI>
        <Literal>Hybrid Automata-based Formalisms</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#LogicBasedFormalism</IRI>
        <Literal>Logic-based Formalisms</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:label"/>
        <IRI>#LogicBasedFormalism</IRI>
        <Literal>Logic-based Formalisms</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty IRI="http://mpm4cps.eu/ontology/shared#mpm4cps:reference"/>
        <IRI>#Megamodel</IRI>
        <Literal>Regina Hebig, Andreas Seibel, and Holger Giese, On the Uniï¬�cation of Megamodels, 4th International Workshop on. Multi-Paradigm Modeling. (MPM 2010)</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty IRI="http://mpm4cps.eu/ontology/shared#mpm4cps:website"/>
        <IRI>#Megamodel</IRI>
        <Literal>https://publishup.uni-potsdam.de/opus4-ubp/frontdoor/index/index/docId/6234</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#Megamodel</IRI>
        <Literal>A model that contains models and relations between them.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty IRI="http://mpm4cps.eu/ontology/shared#mpm4cps:toDo"/>
        <IRI>#MegamodelFragment</IRI>
        <Literal>Do we add also application and configuration division here?</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#MegamodelFragment</IRI>
        <Literal>The fragment is not a complete megamodel, and can&apos;t be used alone. It can be reused to take part in another megamodel. (e.g. physical part, view of the system, self-adaptation .... etc.)</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#Metamodel</IRI>
        <Literal>A metamodel is a model of a model.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#MicroModelElement</IRI>
        <Literal>MicroModelElement represents an  atomic element contained by a MicroModel.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#Micromodel</IRI>
        <Literal>Micromodels are usual models and their model elements.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#Model</IRI>
        <Literal>A representation of real artifacts regardless of the metamodeling technical space. e.g. xml file, equations...etc.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty IRI="http://mpm4cps.eu/ontology/shared#mpm4cps:reference"/>
        <IRI>#ModelRelation</IRI>
        <Literal>&quot;On the Unification of Megamodels&quot; paper.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#ModelRelation</IRI>
        <Literal>A model relation is used to connect an arbitrary number of models.
This connects reference is defined in our ontology by the hasConnectedModels object property. 
The property has the ModelRelation for its domain and the Model class for its range.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#ModelRelation</IRI>
        <Literal>A relation that connects models.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#ModelingDC</IRI>
        <Literal>The ModelingDC subdomain organizes modeling concepts related to core modeling, multi-formalism and model management. It extends several notions introduced in a generic way by the shared ontology such as Language subclassed into ModelingLanguage and Tool subclassed into ModelingTool.

It precises the core notions of Model, ModelRelation, ModelingLanguage, AbstractSyntax, ConcreteSyntax, etc., as well as the core model management notions related to megamodeling such as Megamodel, MegamodelFragment, ModelRelation, etc.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#ModelingLanguage</IRI>
        <Literal>ModelingLanguage extends the Language subclasse from the shared ontology.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#ModelingParadigm</IRI>
        <Literal>A modeling paradigm is a set of properties characterizing the languages (including their semantics) and workflows (development
processes) employed to develop systems.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#ModelingTool</IRI>
        <Literal>Tools to model the system.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty IRI="http://mpm4cps.eu/ontology/shared#mpm4cps:author"/>
        <IRI>#PetriNetBasedFormalism</IRI>
        <Literal>Didier_Buchs</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#PetriNetBasedFormalism</IRI>
        <Literal>Petri nets (also known as a place/transition net or P/T net) are formalisms for the description of distributed systems.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:label"/>
        <IRI>#PetriNetBasedFormalism</IRI>
        <Literal>Petri Net-based Formalisms</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#ProgrammingLanguage</IRI>
        <Literal>The programming languages can be seen as a subset of modeling languages.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#RefinementRelation</IRI>
        <Literal>Example of a  transformation relation.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#RuntimeTool</IRI>
        <Literal>Runtime Tool</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#SemanticDomain</IRI>
        <Literal>According to Wikipedia, a semantic domain is defined as “a specific place that shares a set of meanings, or a language that holds it”.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#SemanticMappingRelation</IRI>
        <Literal>A semantic mapping relation.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#SimulationTool</IRI>
        <Literal>Simulation Tool</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty IRI="http://mpm4cps.eu/ontology/shared#mpm4cps:toBeReviewed"/>
        <IRI>#Structural</IRI>
        <Literal></Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#Structural</IRI>
        <Literal>Structure</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#StructuralConstraintLanguage</IRI>
        <Literal>A modeling language for expressing constraints.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#StructureCharacteristic</IRI>
        <Literal>Structural.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#SynchronizationRelation</IRI>
        <Literal>Example of a  transformation relation.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#SyntaxMappingRelation</IRI>
        <Literal>Abstract and concrete syntaxes are related via a SyntaxMappingRelation  class that associates element(s) of a concrete syntax to represent element(s) of the abstract syntax.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#TextualSyntax</IRI>
        <Literal>A textual syntax consists of sequences of characters taken from an alphabet and grouped into words or tokens. 
Only some sequences of words or sentences are considered valid and the set of all valid sentences is said to make up the language.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#TimedAutomataBasedFormalism</IRI>
        <Literal>Timed Automata-based Formalisms</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#TimedCharacteristic</IRI>
        <Literal>Timed Characteristic</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#TraceabilityModel</IRI>
        <Literal>After or while a transformation is being executed, the transformed models often need to be related and a set of traceability relations are created as a by-product of the transformation execution.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#TraceabilityRelation</IRI>
        <Literal>A traceability relation.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#TransformationLanguage</IRI>
        <Literal>A langauge to specify model transformations.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#TransformationRelation</IRI>
        <Literal>A Transformation Relation</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#TransformationTool</IRI>
        <Literal>Transformation Tool</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#TranslationalSemantics</IRI>
        <Literal>A translational semantics maybe considered as a  semantic domain with a semantic mapping for a given language.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#UncertaintyCharacteristic</IRI>
        <Literal>Uncertainty Characteristic</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#VisualizationTool</IRI>
        <Literal>Visualization Tool</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#hasAbstractSyntax</IRI>
        <Literal>The hasAbstractSyntax object property is a subproperty of the hasSyntax object property of the linguistic subdomain to relate the  ModelingLanguage and AbstractSyntax classes.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#hasAbstractSyntaxSem</IRI>
        <Literal>The hasAbstractSyntaxSem object property links the mapping relation to the mapped abstract syntax.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#hasCharacteristic</IRI>
        <Literal>The hasCharacteristics relates a Formalism with a characteristic.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#hasConcreteSyntax</IRI>
        <Literal>The hasAbstractSyntax object property is a subproperty of the hasSyntax object property of the linguistic subdomain, relating a ModelingLanguage with its  AbstractSyntax.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#hasConformedModel</IRI>
        <Literal>The hasConnectedModels object property links a  ConformanceRelation to MicroModel.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#hasConnectedModel</IRI>
        <Literal>The model relation is used to connect an arbitrary number of models. This connects reference is defined in our ontology by the hasConnectedModels object property.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#hasContainedMegamodelFragments</IRI>
        <Literal>It describes the relation between megamodel and its fragments.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#hasContainedModelElements</IRI>
        <Literal>It describes the relation between micromodel and its elements.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#hasContainedModelRelations</IRI>
        <Literal>A model relation also needs to be contained in a model and therefore we create the hasContainedModelRelations object property whose domain is Model and range ModelRelation.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty IRI="http://mpm4cps.eu/ontology/shared#mpm4cps:website"/>
        <IRI>#hasContainedModels</IRI>
        <Literal>http://journal.ub.tu-berlin.de/eceasst/article/viewFile/704/713</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#hasContainedModels</IRI>
        <Literal>It describes a recursive relation. e.g. MegaModelFragment hasModel xModel ...</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#hasContextRelation</IRI>
        <Literal>A model relation may exist in the context of another model relation. This is expressed by  the hasContextRelation object property in the ontology. An example of such contextual relation may be a relation between to model elements that can only exist after a relation has first been created between their respective containing parent elements.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#hasInputModel</IRI>
        <Literal>It describes the input model for a model relation.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#hasLanguage</IRI>
        <Literal>The model could be expressed in natural language or formal language that is why the range is Language class not the ModelingLanguage class.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#hasLanguage</IRI>
        <Literal>The relation defines the formal language for a formalism. It is an inverse of hasFormalism.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#hasMetamodel</IRI>
        <Literal>The hasMetamodel object property is a subproperty of the hasConnectedModels object property with its domain and range respectively refined to ConformanceRelation and Metamodel</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#hasModelOperation</IRI>
        <Literal>It defines a model operation for a model.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#hasModelRelation</IRI>
        <Literal>It defines a model relation for a model.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#hasOutputModel</IRI>
        <Literal>It describes the output model for a model relation.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#hasSemanticDomain</IRI>
        <Literal>The hasSemanticDomain object properties links the mapping relation to  its semantic domain.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#hasSpecification</IRI>
        <Literal>a TransformationRelation class is a subclass of the ModelRelation class with an object property hasSpecification
to relate the transformation relation to its specification.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#hasSyntaxMapping</IRI>
        <Literal>The hasSyntaxMapping relates  a ConcreteModelingLanguage to its SyntaxMappingRelation.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#hasTraceabilityRelation</IRI>
        <Literal>The hasContainedModelRelations is refined into the hasTraceabilityRelation with the domain and the range respectively refined into TraceabilityModel and TraceabilityRelation.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#hasTranformationSpecification</IRI>
        <Literal>The hasTranformationSpecifications object property relates an activity performer resource to the transformation relations it executes.</Literal>
    </AnnotationAssertion>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <IRI>#isBasedOnFormalism</IRI>
        <Literal>The relation defines the formalism for a formal language. It is an inverse of hasLanguage.</Literal>
    </AnnotationAssertion>
</Ontology>



<!-- Generated by the OWL API (version 4.5.9.2019-02-01T07:24:44Z) https://github.com/owlcs/owlapi -->

