pre {
	"Running fmToOWL transformation".println();
	var ont : new owl!Ontology;
	var sharedOnt : new owl!Import;
	var sharedClasses = new List;

	// Header settings
	ont.base = "http://mpm4cps.eu/ontology/cps";
	ont.ontologyIRI = "http://mpm4cps.eu/ontology/cps";

	// Prefixes
	addPrefix("", "http://mpm4cps.eu/ontology/cps");
	addPrefix("owl", "http://www.w3.org/2002/07/owl#");
	addPrefix("rdf", "http://www.w3.org/1999/02/22-rdf-syntax-ns#");
	addPrefix("xml", "http://www.w3.org/XML/1998/namespace");
	addPrefix("xsd", "http://www.w3.org/2001/XMLSchema#");
	addPrefix("rdfs", "http://www.w3.org/2000/01/rdf-schema#");

	//import shared ontology and prepare a list of its classes
	sharedOnt.value = "http://mpm4cps.eu/ontology/shared";
	ont.Import.add(sharedOnt);

	var root : new owl!Class;
	var owlDeclaration : new owl!Declaration;

	root.iri = generateOwlClassIRI("CPSDC");
	owlDeclaration.class = root;
	ont.declaration.add(owlDeclaration);
	ont.annotationAssertion.add(createAuthor(root.iri, "FeatureModel"));

	for (class in shared!Class) {
		sharedClasses.add(class.iri);
		/*if (class.iri = "#DomainConcept"){
			root.ontHierarchyShared("DomainConcept");
		}*/	
	}
	root.ontHierarchyShared("DomainConcept");
}

post {
	"Feature model to OWL transformation finished.".println();
	}

//-----//
//RULES//
//-----//

// to transform FM features to OWL classes
rule featureTypeToClass
	transform feature : fm!FeatureType
	to owlDeclaration : owl!Declaration {
	guard : not feature.isDisabled () and not feature.isIndividual ()
	// Create class
	var owlClass : new owl!Class;
	var s : new String;
	owlClass.iri = generateOwlClassIRI(feature.name);
	owlDeclaration.class = owlClass;
	ont.declaration.add(owlDeclaration);
	s = "CREATED OWL class " + owlClass.iri;
	s.println();
	// Create description (if any)
	if (feature.description.isDefined()) {
		ont.annotationAssertion.add(createDescription(owlClass.iri, feature.description));
		ont.annotationAssertion.add(createAuthor(owlClass.iri, "FeatureModel"));
		s = "CREATED annotation for OWL class " + owlClass.iri;
		s.println();
	} else {
	s = "NO ANNOTATION FOUND FOR " + owlClass.iri + " !!";
	s.println();
	}
}

// to transform FM branches to OWL classes
rule branchTypeToClass
	transform branch : fm!BranchType
	to owlDeclaration : owl!Declaration {
	guard : not branch.isDisabled ()
	// Create class
	var owlClass : new owl!Class;
	var s : new String;
	owlClass.iri = generateOwlClassIRI(branch.name);
	owlDeclaration.class = owlClass;
	ont.declaration.add(owlDeclaration);
	s = "CREATED OWL class " + owlClass.iri;
	s.println();
	// Create description (if any)
	if (branch.description.isDefined()) {
		ont.annotationAssertion.add(createDescription(owlClass.iri, branch.description));
		ont.annotationAssertion.add(createAuthor(owlClass.iri, "FeatureModel"));
		s = "ADDED annotation for OWL class " + owlClass.iri;
		s.println();
	} else {
	s = "NO ANNOTATION FOUND FOR " + owlClass.iri + " !!";
	s.println();
	}
}

// to transform feature relations to OWL subclass relations
rule subClassRelationToOWLSubclassOf
	transform featurerelation : featureRelations!SubClassRelation
	to owlsubclass : owl!SubClassOf {
	guard : not featurerelation.hasIndividuals
	var subClasses : List = featurerelation.hasSubclasses();
	var s : new String;
	if (subClasses.notEmpty()){
		for (subClass : fm!FeatureType in subClasses){
			if ( subClass.equivalent().isDefined() and not subClass.isIndividual() and not subClass.isDisabled()) {
        		subClass.equivalent().class.ontHierarchy(featurerelation.SuperBranch.equivalent().class);
        		s = "CREATED subclass relation between " + subClass.name + " and " + featurerelation.SuperBranch.name ;
				s.println();
  			}
  		}
  		for (subClass : fm!BranchType in subClasses){
  			if (subClass.equivalent().isDefined() and not subClass.isDisabled()){
  				subClass.equivalent().class.ontHierarchy(featurerelation.SuperBranch.equivalent().class);
        		s = "CREATED subclass relation between " + subClass.name + " and " + featurerelation.SuperBranch.name ;
				s.println();
  			}
  		}
	}
}

// to relate features with no superclass (defined in FRM) as subset of CPSDC
rule noSubBranchRelationToOWLSubclassOfCPSDC
	transform branch : fm!BranchType
	to owlsubclass : owl!SubClassOf{
	guard : not branch.isDisabled()
	var s : new String;
	if ( not branch.isSubclass() ) {
		branch.equivalent().class.ontHierarchy(root);
		s = "CREATED subclass relation between " + branch.name + " and CPSDC";
		s.println();
	}
}

// to relate branches with no superclass (defined in FRM) as subset of CPSDC
rule noSubFeatureRelationToOWLSubclassOfCPSDC
	transform feature : fm!FeatureType
	to owlsubclass : owl!SubClassOf{
	guard : not feature.isDisabled() and not feature.isIndividual ()
	var s : new String;
	if ( not feature.isSubclass() ) {
		feature.equivalent().class.ontHierarchy(root);
		s = "CREATED subclass relation between " + feature.name + " and CPSDC";
		s.println();
	}
}

// to add object properties to the ontology
rule branchTypeToDeclareObjectProperties
	transform branch : fm!BranchType
	to owlDeclaration : owl!Declaration, owlOP : owl!ObjectProperty {
	guard : not branch.isDisabled ()
	var s : new String;
	owlOP.iri = branch.generateOwlObjectPropertyIRI();
	owlDeclaration.objectProperty = owlOP;
	ont.declaration.add(owlDeclaration);
	s = "CREATED object property " + owlOP.iri;
	s.println();
}

rule featureTypeToDeclareObjectProperties
	transform feature : fm!FeatureType
	to owlDeclaration : owl!Declaration, owlOP : owl!ObjectProperty {
	guard : not feature.isDisabled () and not feature.isIndividual ()
	var s : new String;
	owlOP.iri = feature.generateOwlObjectPropertyIRI();
	owlDeclaration.objectProperty = owlOP;
	ont.declaration.add(owlDeclaration);
	s = "CREATED object property " + owlOP.iri;
	s.println();
}

// Add range to the object properties
rule branchTypeToObjectPropertyRange
	transform branch : fm!BranchType
	to owlObjectPropertyRange : owl!ObjectPropertyRange, owlOP : owl!ObjectProperty, owlClass: owl!Class {
	guard : not branch.isDisabled ()
	var s : new String;
	owlOP.iri = branch.generateOwlObjectPropertyIRI();
	owlObjectPropertyRange.objectProperty = owlOP;
	owlClass.iri = generateOwlClassIRI(branch.name);
	owlObjectPropertyRange.class = owlClass;
	ont.objectPropertyRange.add( owlObjectPropertyRange );
	s = "ADDED Range " + owlClass.iri + " to object property " + owlOP.iri;
	s.println();
}

rule featureTypeToObjectPropertyRange
	transform feature : fm!FeatureType
	to owlObjectPropertyRange : owl!ObjectPropertyRange, owlOP : owl!ObjectProperty, owlClass: owl!Class {
    guard : not feature.isDisabled () and not feature.isIndividual ()
    var s : new String;
	owlOP.iri = feature.generateOwlObjectPropertyIRI();
	owlObjectPropertyRange.objectProperty = owlOP;
	owlClass.iri = generateOwlClassIRI(feature.name);
	owlObjectPropertyRange.class = owlClass;
	ont.objectPropertyRange.add( owlObjectPropertyRange );
	s = "ADDED Range " + owlClass.iri + " to object property " + owlOP.iri;
	s.println();
}

// Add domain to the object properties
rule branchTypeToObjectPropertyDomain
	transform branch : fm!BranchType
	to owlObjectPropertyDomain : owl!ObjectPropertyDomain, owlOP : owl!ObjectProperty, owlClass : owl!Class {
	guard : not branch.isDisabled ()
	var s : new String;
	var subfeatures : List = hasSubFeatures( branch );
	var subbranches : List = hasSubBranches( branch );
	for (feature : fm!FeatureType in subfeatures) {
		ontOPDomain( feature, branch );
		s = "ADDED Domain " + feature.name + " to object property " + branch.name;
		s.println();
	}
	for (feature : fm!BranchType in subbranches) {
		ontOPDomain( feature, branch );
		s = "ADDED Domain " + feature.name + " to object property " + branch.name;
		s.println();
	}
}

// Add object property relationships to the ontology
//for And Branch
rule andBranchTypeToSubclassOf
	transform branch : fm!BranchType
	to owlSubClassOf : owl!SubClassOf, owlClass : owl!Class, owlObjectIntersectionOf : owl!ObjectIntersectionOf {
	guard : branch.isAndBranch() and branch.hasFeatures( true ) and not branch.isDisabled () and not branch.hasIndividual ()

	owlClass.iri = generateOwlClassIRI(branch.name);
	owlSubClassOf.class.add(owlClass);
	owlSubClassOf.objectIntersectionOf = owlObjectIntersectionOf;
	ont.subclassof.add( owlSubClassOf );

	for ( subBranch in branch.And ) {
		subBranch.addSomeValueFromFeature( owlObjectIntersectionOf, true );
	}
	for ( subBranch in branch.alt ) {
		subBranch.addSomeValueFromFeature( owlObjectIntersectionOf, true );
	}
	for ( subBranch in branch.Or ) {
		subBranch.addSomeValueFromFeature( owlObjectIntersectionOf, true );
	}
	for ( feature in branch.feature ) {
		feature.addSomeValueFromFeature( owlObjectIntersectionOf, true );
	}
}

//for Or Branch
rule orBranchTypeToSubclassOf
	transform branch : fm!BranchType
	to owlSubClassOf : owl!SubClassOf, owlClass : owl!Class, owlObjectUnionOf : owl!ObjectUnionOf {
	guard : branch.isOrBranch() or branch.isAltBranch() and branch.hasFeatures( false ) and not branch.isDisabled () and not branch.hasIndividual ()

	owlClass.iri = generateOwlClassIRI(branch.name);
	owlSubClassOf.class.add(owlClass);
	owlSubClassOf.objectUnionOf = owlObjectUnionOf;
	ont.subclassof.add( owlSubClassOf );

	for ( subBranch in branch.And ) {
		subBranch.addSomeValueFromFeature( owlObjectUnionOf );
	}
	for ( subBranch in branch.alt ) {
		subBranch.addSomeValueFromFeature( owlObjectUnionOf );
	}
	for ( subBranch in branch.Or ) {
		subBranch.addSomeValueFromFeature( owlObjectUnionOf );
	}
	for ( feature in branch.feature ) {
		feature.addSomeValueFromFeature( owlObjectUnionOf );
	}
}

//for Alternative Branch
rule altBranchTypeToSubclassOf
	transform branch : fm!BranchType
	to owlSubClassOf : owl!SubClassOf, owlClass : owl!Class, owlObjectComplementOf : owl!ObjectComplementOf, owlObjectUnionOf : owl!ObjectUnionOf {
	guard : branch.isAltBranch() and branch.hasFeatures( false ) and not branch.isDisabled () and not branch.hasIndividual ()

	owlClass.iri = generateOwlClassIRI(branch.name);
	owlSubClassOf.class.add(owlClass);
	owlSubClassOf.objectComplementOf = owlObjectComplementOf;
	owlObjectComplementOf.objectUnionOf = owlObjectUnionOf;
	ont.subclassof.add( owlSubClassOf );

	for ( subBranch in branch.And ) {
		branch.addDisjointTwoByTwoFeatures( owlObjectUnionOf, subBranch );
	}
	for ( subBranch in branch.alt ) {
		branch.addDisjointTwoByTwoFeatures( owlObjectUnionOf, subBranch );
	}
	for ( subBranch in branch.Or ) {
		branch.addDisjointTwoByTwoFeatures( owlObjectUnionOf, subBranch );
	}
	for ( feature in branch.feature ) {
		branch.addDisjointTwoByTwoFeatures( owlObjectUnionOf, feature );
	}
}

//----------//
//OPERATIONS//
//----------//

//------------------------------------------------//
//OPERATIONS RELATED TO OWL SUBCLASS RELATIONSHIPS//
//------------------------------------------------//

// to generate OWL subclass declaration from superclass
operation owl!Class ontHierarchy (superClass : owl!Class) {
	var owlSubClass : new owl!SubClassOf;
	var owlParentClass : new owl!Class;
	var owlChildClass : new owl!Class;

	owlChildClass.iri = self.iri;
	owlSubClass.class.add(owlChildClass);
	owlParentClass.iri = superClass.iri;
	owlSubClass.class.add(owlParentClass);
	ont.subclassof.add(owlSubClass);
}

// to generate OWL subclass declaration from superclass name
operation owl!Class ontHierarchyShared (superClassName : String) {
	var owlSubClass : new owl!SubClassOf;
	var owlParentClass : new owl!Class;
	var owlChildClass : new owl!Class;
	owlChildClass.iri = self.iri;
	owlSubClass.class.add(owlChildClass);
	owlParentClass.iri = generateOwlClassIRI (superClassName);
	owlSubClass.class.add(owlParentClass);
	ont.subclassof.add(owlSubClass);
}

// to return list of subclasses of a branch
operation fm!BranchType hasSubclasses (): List {
   var subClasses = new List;
   for (relation in featureRelations!SubClassRelation) {
      if (relation.SuperBranch = self and not relation.SuperBranch.hasIndividuals){
    	subClasses = relation.hasSubClasses ();
 }  
   }
   return subClasses;
}

// to generate list of subclasses in a FRM subclass relation
operation featureRelations!SubClassRelation hasSubclasses (): List {
    var subClasses = new List;
    for (feat in self.SubFeature) {
subClasses.add (feat);
}
for (branch in self.SubBranch) {
subClasses.add (branch);
}      
    return subClasses;
}

// to check if a branch is a subclass
operation fm!BranchType isSubclass (): Boolean {
   	for (relation in featureRelations!SubClassRelation) {
    	for (branch in relation.SubBranch) {
       		if (branch = self){
       			return true;
       		}
       	}
   	}
   	return false;
}

//to check if a feature is a subclass
operation fm!FeatureType isSubclass (): Boolean {
	for (relation in featureRelations!SubClassRelation) {
    	for (feature in relation.SubFeature) {
       		if (feature = self){
       			return true;
       		}
       	}
   	}
   	return false;
}

//---------------------------------------------------//
//OPERATIONS RELATED TO IRIs AND STRING MANIPULATIONS//
//---------------------------------------------------//

// to generate OWL class IRI from feature name
operation generateOwlClassIRI(fmName : String) : String {
	return generateOwlClassIRI( '' , fmName );
}

operation generateOwlClassIRI( prefix : String, fmName : String) : String {
	var refactoredfmName : String;
	var splited = new List;
	splited = fmName.split("\\s+");
	if (splited.size() > 1) {
		for (s in splited) {
			refactoredfmName += s.firstToUpperCase();
		}
		fmName = refactoredfmName;
	}
	if (sharedClasses.contains("#"+ prefix + fmName)) {
		return sharedOnt.value + "#" + prefix + fmName;
	} else {
		return "#" + prefix + fmName.legalName();
	}
}

//to add prefix to the ontology
operation addPrefix(prefixName : String, prefixIRI : String) {
	var prefix = new owl!Prefix;
	prefix.name = prefixName;
	prefix.iri = prefixIRI;
	ont.Prefix.add(prefix);
}

//to generate OWL object propertyIRI for branch type classes
operation fm!BranchType generateOwlObjectPropertyIRI() : String {
	return "#has" + self.name.legalName();
}

//to generate OWL object propertyIRI for feature type classes
operation fm!FeatureType generateOwlObjectPropertyIRI() : String {
	return "#has" + self.name.legalName();
}

//to convert a string to legalname (i.e. without spaces)
operation String legalName() : String {
	return self.replaceall( ' ', '' );
}


//-------------------------------------//
//OPERATIONS RELATED TO OWL ANNOTATIONS//
//-------------------------------------//

// to return descriptive annotation for OWL class
operation createDescription (classIRI : String, description : String) : owl!AnnotationAssertion {
	var owlAnnotation : new owl!AnnotationAssertion;
	// Create AnnotationProperty
	var annotationProp : new owl!AnnotationProperty;
	annotationProp.abbreviatedIRI = "rdfs:comment";
	owlAnnotation.annotationProperty = annotationProp;
	// Create IRI
	var iri : new owl!IRI;
	iri.value = classIRI;
	owlAnnotation.iri = iri;
	// Create Literal
	var literal : new owl!Literal;
	literal.datatypeIRI = "http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral";
	literal.value = description;
	owlAnnotation.literal = literal;
	return owlAnnotation;
}

//to return author annotation for OWL class
operation createAuthor (classIRI : String, author : String) : owl!AnnotationAssertion {
	var owlAnnotation : new owl!AnnotationAssertion;
	// Create AnnotationProperty
	var annotationProp : new owl!AnnotationProperty;
	annotationProp.iri = "#mpm4cps:author";
	owlAnnotation.annotationProperty = annotationProp;
	// Create IRI
	var iri : new owl!IRI;
	iri.value = classIRI;
	owlAnnotation.iri = iri;
	// Create Literal
	var literal : new owl!Literal;
	literal.datatypeIRI = "http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral";
	literal.value = author;
	owlAnnotation.literal = literal;
	return owlAnnotation;
}

//------------------------------------------------------//
//OPERATIONS RELATED TO INDIVIDUAL AND DISABLED FEATURES//
//------------------------------------------------------//

// to check if a feature is an individual, it can either be declared individual directly or its superbranch.hasIndividual = true.
operation fm!FeatureType isIndividual (): Boolean {
	if ( self.isDeclaredIndividual () or self.hasSuperBranchIndividuals ()) {
		return true;
	} else {
		return false;
	}  
}

//to check if the super-branch of the feature has individuals
operation fm!FeatureType hasSuperBranchIndividuals (): Boolean {
	for (branch in featureRelations!SubClassRelation) {
    	if (branch.hasIndividuals){
    		for (feat in branch.SubFeature) {
        		if (feat = self){
          			return true;
        		}
    		}      
  		}
    }
return false;
}

//to check if a feature is declared individual independently
operation fm!FeatureType isDeclaredIndividual (): Boolean {
	for (individual in featureRelations!Individual) {
		for (feat in individual.Features) {
      		if (feat.name = self.name) {
      			return true;
      		}
      	}
	}
    return false;
}

// to check if a feature is disabled
operation fm!FeatureType isDisabled (): Boolean {
   for (feat in featureRelations!Disabled) {
     if (feat.features.indexOf (self) <> -1){
        return true;
     }
   }  
   return false;  
}

//to check if a branch is disabled
operation fm!BranchType isDisabled (): Boolean {
   for (branch in featureRelations!Disabled) {
     if (branch.branches.indexOf (self) <> -1){
        return true;
     }
   }  
   return false;  
}

// to check if a branch has individuals
operation fm!BranchType hasIndividual (): Boolean {
	for (branch in featureRelations!SubClassRelation) {
      	if (branch.SuperBranch = self) { 
      		if (branch.hasIndividuals) {
    			return true;
      		} else {
      		return false;
      		}
   		}      
   	return false;  
	}
}

//---------------------------------------------------------//
//OPERATIONS RELATED TO FEATURE MODEL SUB-FEATURE RELATIONS//
//---------------------------------------------------------//

// to check if a feature has subfeatures
operation fm!BranchType hasFeatures( checkMandatory : Boolean ) {
	for ( subBranch in self.And ) {
		if ( not subBranch.isHidden() and ( not checkMandatory or subBranch.isMandatory() ) ) {
			return true;
		}
	}
	for ( subBranch in self.alt ) {
		if ( not subBranch.isHidden() and ( not checkMandatory or subBranch.isMandatory() ) ) {
			return true;
		}
	}
	for ( subBranch in self.Or ) {
		if ( not subBranch.isHidden() and ( not checkMandatory or subBranch.isMandatory() ) ) {
			return true;
		}
	}
	for ( feature in self.feature ) {
		if ( not feature.isHidden() and not feature.isIndividual () and ( not checkMandatory or feature.isMandatory() ) ) {
			return true;
		}
	}
	return false;
}

// to check if a branch is of mandatory type
operation fm!BranchType isMandatory() : Boolean {
	if ( self.mandatory.isDefined() ) {
		return self.mandatory.asBoolean();
	}
	return false;
}

// to check if a branch is of And type
operation fm!BranchType isAndBranch() :  Boolean {
	return self.isBranchOf( 'and' );
}

// to check if a branch  is of Or type
operation fm!BranchType isOrBranch() :  Boolean {
	return self.isBranchOf( 'or' );
}

// to check if a branch is of Alt type
operation fm!BranchType isAltBranch() :  Boolean {
	return self.isBranchOf( 'alt' );
}

// to check if a branch is of a specific type
operation fm!BranchType isBranchOf( type : String ) :  Boolean {
	return self.eContainingFeature().name = type;
}

// to return list of sub-features of a branch
operation hasSubFeatures ( superbranch : fm!BranchType ): List {
	var subFeatures = new List;
	var s = new String;
	for ( feature in superbranch.feature ) {
		if ( not feature.isDisabled () and not feature.isIndividual () ) {
			subFeatures.add ( feature );
		}
	}
	return subFeatures;
}

// to return list of sub-branches of a branch
operation hasSubBranches ( superbranch : fm!BranchType ): List {
	var subBranches = new List;
	for ( branch in superbranch.alt ) {
		if (not branch.isDisabled()) {
			subBranches.add (branch);
		}
	}
	for ( branch in superbranch.And ) {
		if (not branch.isDisabled()) {
			subBranches.add (branch);
		}
	}
	for ( branch in superbranch.Or ) {
		if (not branch.isDisabled()) {
			subBranches.add (branch);
		}
	}
	return subBranches;
}

//---------------------------------------------------------------//
//OPERATIONS RELATED TO ADDITION OF OBJECT PROPERTY RELATIONSHIPS//
//---------------------------------------------------------------//

operation fm!BranchType addSomeValueFromFeature( owlObjectIntersectionOf : owl!ObjectIntersectionOf, checkMandatory : Boolean ) {
	if ( not self.isHidden() and ( not checkMandatory or self.isMandatory() ) ) {
		var owlObjectSomeValuesFrom : new owl!ObjectSomeValuesFrom;
		var owlOP : new owl!ObjectProperty;
		owlOP.iri = self.generateOwlObjectPropertyIRI();
		owlObjectSomeValuesFrom.objectProperty = owlOP;
		var owlClassRange : new owl!Class;
		owlClassRange.iri = generateOwlClassIRI(self.name);
		owlObjectSomeValuesFrom.class = owlClassRange;
		owlObjectIntersectionOf.objectSomeValuesFrom.add( owlObjectSomeValuesFrom );
	}
}

operation fm!FeatureType addSomeValueFromFeature( owlObjectIntersectionOf : owl!ObjectIntersectionOf, checkMandatory : Boolean ) {
	if (not self.isHidden() and not self.isIndividual () and ( not checkMandatory or self.isMandatory() )) {
		var owlObjectSomeValuesFrom : new owl!ObjectSomeValuesFrom;
		var owlOP : new owl!ObjectProperty;
		owlOP.iri = self.generateOwlObjectPropertyIRI();
		owlObjectSomeValuesFrom.objectProperty = owlOP;
		var owlClassRange : new owl!Class;
		owlClassRange.iri = generateOwlClassIRI(self.name);
		owlObjectSomeValuesFrom.class = owlClassRange;
		owlObjectIntersectionOf.objectSomeValuesFrom.add( owlObjectSomeValuesFrom );
	}
}

operation fm!BranchType addSomeValueFromFeature( owlObjectUnionOf : owl!ObjectUnionOf ) {
	if ( not self.isHidden() ) {
		var owlObjectSomeValuesFrom : new owl!ObjectSomeValuesFrom;
		var owlOP : new owl!ObjectProperty;
		owlOP.iri = self.generateOwlObjectPropertyIRI();
		owlObjectSomeValuesFrom.objectProperty = owlOP;
		var owlClassRange : new owl!Class;
		owlClassRange.iri = generateOwlClassIRI(self.name);
		owlObjectSomeValuesFrom.class = owlClassRange;
		owlObjectUnionOf.objectSomeValuesFrom.add( owlObjectSomeValuesFrom );
	}
}

operation fm!FeatureType addSomeValueFromFeature( owlObjectUnionOf : owl!ObjectUnionOf ) {
	if (not self.isHidden()) {
		var owlObjectSomeValuesFrom : new owl!ObjectSomeValuesFrom;
		var owlOP : new owl!ObjectProperty;
		owlOP.iri = self.generateOwlObjectPropertyIRI();
		owlObjectSomeValuesFrom.objectProperty = owlOP;
		var owlClassRange : new owl!Class;
		owlClassRange.iri = generateOwlClassIRI(self.name);
		owlObjectSomeValuesFrom.class = owlClassRange;
		owlObjectUnionOf.objectSomeValuesFrom.add( owlObjectSomeValuesFrom );
	}
}

operation fm!BranchType addDisjointTwoByTwoFeatures( owlObjectUnionOf : owl!ObjectUnionOf, branch : fm!BranchType ) {
	for ( subBranch in self.And ) {
		if ( branch <> subBranch and not subBranch.isHidden() ) {
			var owlObjectIntersectionOf : new owl!ObjectIntersectionOf;
			owlObjectUnionOf.objectIntersectionOf.add( owlObjectIntersectionOf );
			branch.addSomeValueFromFeature( owlObjectIntersectionOf, false );
			subBranch.addSomeValueFromFeature( owlObjectIntersectionOf, false );
		}
	}
	for ( subBranch in self.alt ) {
		if ( branch <> subBranch and not subBranch.isHidden() ) {
			var owlObjectIntersectionOf : new owl!ObjectIntersectionOf;
			owlObjectUnionOf.objectIntersectionOf.add( owlObjectIntersectionOf );
			branch.addSomeValueFromFeature( owlObjectIntersectionOf, false );
			subBranch.addSomeValueFromFeature( owlObjectIntersectionOf, false );
		}
	}
	for ( subBranch in self.Or ) {
		if ( branch <> subBranch and not subBranch.isHidden() ) {
			var owlObjectIntersectionOf : new owl!ObjectIntersectionOf;
			owlObjectUnionOf.objectIntersectionOf.add( owlObjectIntersectionOf );
			branch.addSomeValueFromFeature( owlObjectIntersectionOf, false );
			subBranch.addSomeValueFromFeature( owlObjectIntersectionOf, false );
		}
	}
	for ( subFeature in self.feature ) {
		if ( not subFeature.isHidden() ) {
			var owlObjectIntersectionOf : new owl!ObjectIntersectionOf;
			owlObjectUnionOf.objectIntersectionOf.add( owlObjectIntersectionOf );
			branch.addSomeValueFromFeature( owlObjectIntersectionOf, false );
			subFeature.addSomeValueFromFeature( owlObjectIntersectionOf, false );
		}
	}
}

operation fm!BranchType addDisjointTwoByTwoFeatures( owlObjectUnionOf : owl!ObjectUnionOf, feature : fm!FeatureType ) {
	for ( subBranch in self.And ) {
		if ( not subBranch.isHidden() ) {
			var owlObjectIntersectionOf : new owl!ObjectIntersectionOf;
			owlObjectUnionOf.objectIntersectionOf.add( owlObjectIntersectionOf );
			feature.addSomeValueFromFeature( owlObjectIntersectionOf, false );
			subBranch.addSomeValueFromFeature( owlObjectIntersectionOf, false );
		}
	}
	for ( subBranch in self.alt ) {
		if ( not subBranch.isHidden() ) {
			var owlObjectIntersectionOf : new owl!ObjectIntersectionOf;
			owlObjectUnionOf.objectIntersectionOf.add( owlObjectIntersectionOf );
			feature.addSomeValueFromFeature( owlObjectIntersectionOf, false );
			subBranch.addSomeValueFromFeature( owlObjectIntersectionOf, false );
		}
	}
	for ( subBranch in self.Or ) {
		if ( not subBranch.isHidden() ) {
			var owlObjectIntersectionOf : new owl!ObjectIntersectionOf;
			owlObjectUnionOf.objectIntersectionOf.add( owlObjectIntersectionOf );
			feature.addSomeValueFromFeature( owlObjectIntersectionOf, false );
			subBranch.addSomeValueFromFeature( owlObjectIntersectionOf, false );
		}
	}
	for ( subFeature in self.feature ) {
		if ( feature <> subFeature and not subFeature.isHidden() ) {
			var owlObjectIntersectionOf : new owl!ObjectIntersectionOf;
			owlObjectUnionOf.objectIntersectionOf.add( owlObjectIntersectionOf );
			feature.addSomeValueFromFeature( owlObjectIntersectionOf, false );
			subFeature.addSomeValueFromFeature( owlObjectIntersectionOf, false );
		}
	}
}

operation ontOPDomain ( feature : fm!FeatureType , branch : fm!BranchType ) {
    var owlObjectPropertyDomain = new owl!ObjectPropertyDomain;
    var owlOP = new owl!ObjectProperty;
    var owlClass = new owl!Class;
	owlOP.iri = feature.generateOwlObjectPropertyIRI();
	owlObjectPropertyDomain.objectProperty = owlOP;
	owlClass.iri = generateOwlClassIRI(branch.name);
	owlObjectPropertyDomain.class = owlClass;
	ont.objectpropertyDomain.add( owlObjectPropertyDomain );
}

operation ontOPDomain ( feature : fm!BranchType , branch : fm!BranchType ) {
var owlObjectPropertyDomain = new owl!ObjectPropertyDomain;
    var owlOP = new owl!ObjectProperty;
    var owlClass = new owl!Class;
	owlOP.iri = feature.generateOwlObjectPropertyIRI();
	owlObjectPropertyDomain.objectProperty = owlOP;
	owlClass.iri = generateOwlClassIRI(branch.name);
	owlObjectPropertyDomain.class = owlClass;
	ont.objectpropertyDomain.add( owlObjectPropertyDomain );
}
