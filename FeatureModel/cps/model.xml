<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<featureModel>
	<properties>
		<graphics key="showhiddenfeatures" value="true"/>
		<graphics key="legendposition" value="954,277"/>
		<graphics key="legendautolayout" value="false"/>
		<graphics key="showshortnames" value="false"/>
		<graphics key="layout" value="vertical"/>
		<graphics key="showcollapsedconstraints" value="false"/>
		<graphics key="legendhidden" value="false"/>
		<graphics key="layoutalgorithm" value="4"/>
	</properties>
	<struct>
		<and mandatory="true" name="CPS">
			<and mandatory="true" name="ConstituentElement">
				<graphics key="collapsed" value="false"/>
				<and mandatory="true" name="Cyber">
					<description>
						Communication and control between any human/biological/social system
						and any artificial device. It refers to systems where feedback is essential.
					</description>
					<and mandatory="true" name="Software">
						<feature mandatory="true" name="Program"/>
						<feature mandatory="true" name="System Utilities"/>
						<feature mandatory="true" name="Command Shell"/>
						<feature mandatory="true" name="System Services"/>
						<feature mandatory="true" name="User Interface"/>
						<feature mandatory="true" name="Operating System"/>
					</and>
				</and>
				<and mandatory="true" name="Control">
					<description>The action of modifying the behaviour of a system through feedback.</description>
					<graphics key="collapsed" value="false"/>
					<feature mandatory="true" name="State">
						<description>Instrinsic configuration and description of the system.</description>
					</feature>
					<feature mandatory="true" name="Disturbance">
						<description>
							External influence of the environment in a system,
							typically unknown.
						</description>
					</feature>
					<feature mandatory="true" name="Input">
						<description>Abstraction of the external factors in a system influencing its behaviour.</description>
					</feature>
					<feature mandatory="true" name="Output">
						<description>Abstraction of the effect of a system on its environment.</description>
					</feature>
					<or mandatory="true" name="Goal">
						<description>Desired behaviour of a system.</description>
						<graphics key="collapsed" value="false"/>
						<feature name="Setpoint">
							<description>
								Goal that does not vary with time (typically a constant
								value).
							</description>
						</feature>
						<and name="Tracking">
							<description>
								Action to make the system follow a goal that varies with
								time.
							</description>
							<graphics key="collapsed" value="false"/>
							<and mandatory="true" name="ValidityRegion">
								<feature name="Local">
									<description>It is only valid for a subset of the state space of the system.</description>
								</feature>
								<feature name="Global">
									<description>
										It is valid for all the state space where the system is defined
										(normally an Euclidean space)
									</description>
								</feature>
								<feature name="SemiGlobal">
									<description>Partially global.</description>
								</feature>
							</and>
						</and>
						<feature name="Regulation">
							<description>Action to make the system to reach a set point.</description>
						</feature>
						<feature name="ReferenceSignal">
							<description>
								Desired value for the states and/or outputs of the
								system to reach.
							</description>
						</feature>
					</or>
					<and mandatory="true" name="Feedback">
						<description>
							Implementation of the control action by sensing the output of a
							system and modifying its input by means of actuators to meet a
							pre-defined control goal.
						</description>
						<graphics key="collapsed" value="false"/>
						<or mandatory="true" name="Dependency">
							<graphics key="collapsed" value="false"/>
							<feature name="StateFeedback">
								<description>
									Control action which is designed depending on
									the system states.
								</description>
							</feature>
							<feature name="OutputFeedback">
								<description>
									Control action which is designed depending
									on the system outputs.
								</description>
							</feature>
						</or>
						<alt mandatory="true" name="Scope">
							<feature name="Centralized">
								<description>
									The feedback is only applied on one element of the
									system, which controls the rest of the elements of the system.
								</description>
							</feature>
							<feature name="Decentralized">
								<description>
									The feedback is not applied in a centralised manner,
									there is no central authority.
								</description>
							</feature>
							<feature name="Distributfed">
								<description>
									The feedback is applied on the components of the
									system (it does not have to be all); some coordination of these
									parts has to be put in place.
								</description>
							</feature>
						</alt>
					</and>
					<or mandatory="true" name="Dynamics">
						<description>Evolution of a system over time</description>
						<graphics key="collapsed" value="false"/>
						<or name="SystemType">
							<description>
								Three main features to consider for the classification of
								systems
							</description>
							<graphics key="collapsed" value="false"/>
							<alt name="Linearity">
								<feature name="Linear"/>
								<feature name="Non-linear"/>
							</alt>
							<alt name="Time">
								<feature name="Discrete Time"/>
								<feature name="Continuous Time"/>
							</alt>
							<alt name="Continuity">
								<feature name="Smooth"/>
								<and name="Discontiuous">
									<description>
										Discontinous or non-smooth
										systems present some type of discontinuity in the model representing
										the system. Different names are used depending of the type of
										discontinuity.
									</description>
									<feature name="Multi-modal system">
										<description>
											Systems with different modes, typically
											consisting of several dynamical systems interacting one with
											each other.
										</description>
									</feature>
									<feature name="Discrete-event System">
										<description>
											Systems including discrete events, abrupt
											changes.
										</description>
									</feature>
									<feature name="Transition system">
										<description>Systems with discrete transitions.</description>
									</feature>
									<feature name="Varable structure system"/>
									<feature name="Switched system">
										<description>
											Switched/switching systems are systems where
											the discontinuity is in the derivative of the state, that is, in the
											vector field defining the systems dynamics (for example, systems
											that switch between different operation modes with different
											dynamics in each mode and with the state space partitioned
											in different regions). In switched systems, the state space is
											divided into different regions separated by a discontinuity surface.
											The dynamics on the discontinuity surface It is typically
											undefined and different methods are used to define it, mainly
											Filipov’s continuation method and Utkin’s equivalent control
											method.
										</description>
									</feature>
									<feature name="Reset/jump/impulsive system">
									<description>
										Systems where the discontinuity
										is in the system state (for example, a bouncing ball).
									</description>
								</feature>
								<feature name="Piecewise-affine system">
									<description>
										System whose input space is partitioned,
										and consequently, it has different dynamics depending
										on the discontinuous input.
									</description>
								</feature>
								<feature name="Hybrid system">
									<description>
										Hybrid dynamical systems are systems combining
										continuous dynamics (either continuous time or discrete
										time) and discrete input or event-driven discrete state transitions.
										Indeed, the term ‘hybrid system’ from a dynamical viewpoint
										is more general than ‘discontinuous system’, since discontinuous
										systems are a subclass of hybrid systems.
									</description>
								</feature>
								<feature name="Other"/>
							</and>
						</alt>
					</or>
					<and name="Behavior">
						<description>Dynamical pattern.</description>
						<alt mandatory="true" name="Equilibria">
							<description>
								States of the system that represent set points. They can
								be
							</description>
							<feature name="Common">
								<description>
									A unique equilibrium for all the interacting dynamical
									systems in a more complex system.
								</description>
							</feature>
							<feature name="Multiple">
								<description>Multiple different equilibria in the system.</description>
							</feature>
						</alt>
						<feature name="Bifurcations">
							<description>
								Points that mark a change in the dynamical patterns
								in a system.
							</description>
						</feature>
						<feature name="Oscillations/Limit cycles"/>
						<feature name="Hysteresis">
							<description>
								Persistence of effects after the causes of these effects
								are eliminated, representing the dependence of the state of a system
								on its past history (memory).
							</description>
						</feature>
						<feature name="Complex/strange">
						<description>Unexpected, unpredictable behaviour.</description>
					</feature>
					<feature name="Chattering">
						<description>Infinite switches around a discontinuity surface</description>
					</feature>
					<feature name="Sliding motions">
						<description>
							Dynamics on the discontinuity surface of a
							switched system, key for the analysis of these systems. There
							are typically undefined and different methods are used to define
							it, mainly Filipov’s continuation method and Utkin’s equivalent
							control method.
						</description>
					</feature>
					<feature name="Phase transitions">
						<description>Name for bifurcation, typically used in physics.</description>
					</feature>
					<feature name="Zenoness">
						<description>Infinite switches in a finite time.</description>
					</feature>
					<and mandatory="true" name="Emergent_Behavior">
						<description>
							Behaviour that did not exist in the single systems
							that together form a complex system consisting of interacting
							systems.
						</description>
						<graphics key="collapsed" value="false"/>
						<feature name="Collective">
							<description>Produced by the interaction of many individual elements.</description>
						</feature>
						<feature name="Flocking">
							<description>
								To congregate or travel in flock. How to force all
								individuals to move as a group (control).
							</description>
						</feature>
						<feature name="Swarming">
							<description>To move or gather in groups (modelling).</description>
						</feature>
						<feature name="Consensus">
							<description>
								Protocols to reach an agreement as a group. How to
								achieve a common solution for the entire group (stability).
							</description>
						</feature>
						<feature name="Synchronisation">
							<description>
								Emergence of coherent behaviour in which
								the elements of the system follow the same dynamical pattern.
								It cannot be explained in terms of the individual dynamics of
								each single node in the network.
							</description>
						</feature>
						<feature name="SelfOrganisation">
							<description>
								Collective behaviour that emerges in absence
								of centralised control, local rules for the individuals lead to
								global patterns, transcending the detailed nature of the components.
							</description>
						</feature>
						<feature name="CascadingDynamics">
							<description>
								Effect in cascade in the dynamics of the
								system.
							</description>
						</feature>
						<feature name="Cooperation">
							<description>Action of aggregation of interacting system components.</description>
						</feature>
						<feature name="Competition">
							<description>Action of segregation of interacting system components.</description>
						</feature>
						<feature name="SelfOrganisedCriticality">
							<description>
								Tendency of large systems to evolve
								into a ‘critical’ state where minimal internal changes may lead
								to abrupt avalanches with unpredictable consequences.
							</description>
						</feature>
					</and>
				</and>
				<and name="Topology">
					<description>
						Structure of the interconnections of the components of a
						system.
					</description>
					<alt mandatory="true" name="Evolution">
						<feature name="Static">
							<description>It does not change over time.</description>
						</feature>
						<feature name="Adaptive">
							<description>It evolves over time.</description>
						</feature>
					</alt>
					<or mandatory="true" name="Implementation_">
						<feature name="Logical">
							<description>Non-physical.</description>
						</feature>
						<and name="Physcal_">
							<feature name="Component"/>
							<feature name="Connectors"/>
						</and>
					</or>
				</and>
			</or>
			<and mandatory="true" name="Properties">
				<description>Characteristics related to systems related to control.</description>
				<feature name="Stability">
					<description>
						Idea that a system trajectory will keep getting closer and
						closer to a desired point in space.
					</description>
				</feature>
				<feature name="Dissipativity/Passivity">
				<description>
					Abstraction of the energy properties of systems.
					A dissipative system dissipates energy in some manner.
				</description>
			</feature>
			<feature name="Robustness">
				<description>
					Ability of a system to keep performing well despite
					changes within and outside the system (for example, maintaining its
					trajectories close to equilibria despite perturbations). It does not entail
					adaptation.
				</description>
			</feature>
			<feature name="Adaptation">
				<description>
					Evolution/change over time depending on environment
					and system’s changes.
				</description>
			</feature>
			<feature name="Controllability">
				<description>
					A system is controllable if it can be controlled (its
					internal state can be modified) by modifying its inputs.
				</description>
			</feature>
			<feature name="Observability">
				<description>
					A system is observable if its internal state can be detected
					(observed) from its outputs.
				</description>
			</feature>
			<feature name="Resilience">
				<description>
					Ability of a system to maintain functionality by adaptation
					and recover when changes are produced within and outside the system.
				</description>
			</feature>
			<feature name="Autonomy">
				<description>Ability of a system to make decisions affecting its behaviour.</description>
			</feature>
			<feature name="Intelligence">
				<description>Ability to ‘think’ or automate tasks to achieve a goal.</description>
			</feature>
			<feature name="Consistency">
				<description>
					Property of logical systems by which it is not possible
					to find a contradiction within the system.
				</description>
			</feature>
			<feature name="Heterogeneity">
				<description>Being non-homogeneous.</description>
			</feature>
			<feature name="Sensitivity">
				<description>Level of response of a system to changes.</description>
			</feature>
			<feature name="Learning">
				<description>Ability to learn.</description>
			</feature>
			<alt name="Uncertainty">
				<description>The lack of certainty</description>
				<feature name="Deterministic"/>
				<feature name="Non-deterministic"/>
				<feature name="Probabilistic"/>
				<feature name="Stochastic"/>
			</alt>
		</and>
		<feature name="Diagnostics">
			<description>Identification of properties in a system.</description>
		</feature>
		<feature name="Prognostics">
			<description>
				Prediction of the time in the future when a system will not
				performed anymore as it is expected or for what it was designed (control
				goal).
			</description>
		</feature>
	</and>
	<or name="Human">
		<description>Humans within a CPS perform certain roles within the CPS. </description>
		<graphics key="collapsed" value="false"/>
		<and name="Role">
			<description>
				Each role represents some capacity or position, where humans playing&#13;
				the role need to contribute for achieving certain behaviour goals&#13;
				set for the CPS. Each role is defined in terms of responsibilities and&#13;
				constraints pertaining to the role that are required for contributing&#13;
				to achieving the behaviour goals set for the CPS.
			</description>
			<feature mandatory="true" name="Responsibilities">
				<description>
					Responsibilities are components of a role that determine what a human&#13;
					performing the role must do for the behaviour goals of the CPS to&#13;
					be achieved.
				</description>
			</feature>
			<feature mandatory="true" name="Constraints">
				<description>
					Constraints are conditions that a human performing&#13;
					the role must take into consideration when exercising its&#13;
					responsibilities.&#13;
				</description>
			</feature>
		</and>
		<and name="Event">
			<description>
				A human can perceive events generated by the CPS or&#13;
				environment. An event is a kind of entity that is related to the&#13;
				states of affairs before and after it has occurred. A human&#13;
				perceives events through sensors.
			</description>
			<feature name="State-of-Affairs">
				<description>
					State of affairs is a collective&#13;
					state of the entities of the CPS and the environment.
				</description>
			</feature>
		</and>
		<feature name="Entity">
			<description>
				An entity is anything perceivable or conceivable (I think that entity should be&#13;
				defined for CPS at a higher level than under human).
			</description>
		</feature>
		<or name="Action">
			<description>
				Humans within a CPS exercise their responsibilities defined by&#13;
				roles by performing certain actions. Action is an entity that is&#13;
				targeted at changing the state of the CPS or environment. Actions&#13;
				are divided into physical actions, communicative actions, and&#13;
				epistemic actions.
			</description>
			<feature name="CommunicationAction">
				<description>
					A communicative action is a kind of action that sends a message&#13;
					(I think a message should be defined for CPS but currently it is&#13;
					not) through a communication network of the CPS.
				</description>
			</feature>
			<feature name="PhysicalAction">
				<description>
					Physical action is a kind of action that changes&#13;
					the state of a physical element of the CPS or environment.
				</description>
			</feature>
			<feature name="EpistemicAction">
				<description>
					An epistemic action is a kind of action that changes the state of the data (I&#13;
					would rather use the term knowledge) held by the CPS. A human&#13;
					performs actions through actuators.&#13;
				</description>
			</feature>
		</or>
	</or>
	<and mandatory="true" name="Network">
		<description>
			A set of elements (for example, nodes) connected in some physical or
			abstract manner (for example, links).
		</description>
		<graphics key="collapsed" value="false"/>
		<alt mandatory="true" name="Configuration">
			<feature name="Star"/>
			<feature name="Bus"/>
			<feature name="Ring"/>
			<feature name="Mesh"/>
			<feature name="Point2Point"/>
			<feature name="Hybrid"/>
		</alt>
		<and mandatory="true" name="Communication">
			<alt mandatory="true" name="ComType">
				<feature name="Synchronous"/>
				<feature name="Asynchronous"/>
			</alt>
			<alt mandatory="true" name="Protocol">
				<feature name="P2P"/>
				<feature name="ClientServer"/>
				<feature name="BrokerBased"/>
				<feature name="OtherProtocols"/>
			</alt>
		</and>
	</and>
	<and mandatory="true" name="Physical">
		<graphics key="collapsed" value="false"/>
		<feature mandatory="true" name="Sensor">
			<description>
				External devices or components of the system which collect
				information from the environment or the system state.
			</description>
		</feature>
		<feature mandatory="true" name="Actuator">
			<description>
				External devices or components of the system which act on
				parts of the system to modify its behaviour.
			</description>
		</feature>
		<feature mandatory="true" name="Plant">
			<description>System to control.</description>
		</feature>
		<and mandatory="true" name="Controller">
			<description>
				External device or component of the system which produces
				the control signal to modify the system behaviour
			</description>
			<alt mandatory="true" name="Platform">
				<feature name="System-on-Chip"/>
				<feature name="Motherboard"/>
				<feature name="Network-on-Chip"/>
				<feature name="Microcontroller"/>
			</alt>
			<and name="H/WDesign_Optimizn">
			<graphics key="collapsed" value="false"/>
			<feature name="Min. Latency"/>
			<feature name="Max. Throughput"/>
			<feature name="Min. Power"/>
			<feature name="Min. Area"/>
		</and>
		<and mandatory="true" name="Memory">
			<feature mandatory="true" name="Main Memory"/>
			<feature mandatory="true" name="Cache Memory"/>
			<feature name="Auxiliary Memory"/>
		</and>
		<and mandatory="true" name="Processor">
			<feature mandatory="true" name="CPU"/>
			<feature name="GPU"/>
		</and>
	</and>
	<feature mandatory="true" name="Environment">
		<description>What it is not the system.</description>
	</feature>
</and>
</and>
<or mandatory="true" name="nonfunctionalReqs">
<graphics key="collapsed" value="false"/>
<feature name="Performance"/>
<feature name="Security"/>
<feature name="Safety"/>
<feature name="Reliability"/>
<feature name="Efficiency"/>
<alt name="Interoperability">
	<feature name="SyntacticInteroperability"/>
	<feature name="SemanticInteroperability"/>
</alt>
<feature name="Scalability"/>
<feature name="Composability"/>
<feature name="Availability"/>
<feature name="Sustainability"/>
<feature name="X_ilities"/>
</or>
<alt mandatory="true" name="ApplicationDomain">
<graphics key="collapsed" value="true"/>
<feature name="Health">
	<description>This is the description for health</description>
</feature>
<feature name="SmartManufacturing"/>
<feature name="Transportation"/>
<feature name="ProcessControl"/>
<feature name="Defense"/>
<feature name="BuildingAutomation"/>
<feature name="RoboticforService"/>
<feature name="CriticalInfrastructure"/>
<feature name="EmergencyResponse"/>
<feature name="X_Domain"/>
</alt>
<or mandatory="true" name="Disciplines">
<graphics key="collapsed" value="true"/>
<feature name="SoftwareEngineering"/>
<feature name="MechanicalEngineering"/>
<feature name="ElectricalEngineering"/>
<feature name="CivilEngineering"/>
<feature name="ChecmicalEngineering"/>
<feature name="OtherEngineering"/>
</or>
<and mandatory="true" name="Architecture">
<graphics key="collapsed" value="true"/>
<feature mandatory="true" name="ManagementLayer"/>
<feature mandatory="true" name="CPSComponentLayer"/>
<feature mandatory="true" name="NetworkLayer"/>
<feature mandatory="true" name="ServiceLayer"/>
<feature mandatory="true" name="ApplicationLayer"/>
<feature mandatory="true" name="SecurityLayer"/>
</and>
<or hidden="true" name="Evaluation">
<graphics key="collapsed" value="true"/>
<feature name="Simulation"/>
<feature name="Experimentation"/>
<feature name="Testing"/>
<feature name="Formal_Verification"/>
<feature name="OtherEvaluation"/>
</or>
<and hidden="true" name="Tool">
<graphics key="collapsed" value="false"/>
<or mandatory="true" name="Tool_Integration">
	<graphics key="collapsed" value="true"/>
	<feature name="Within_Domain"/>
	<feature name="Across_Domains"/>
</or>
<or mandatory="true" name="kind">
	<graphics key="collapsed" value="true"/>
	<feature name="CyberTool"/>
	<feature name="PhysicalTool"/>
	<feature name="HW_SW_CoDesignTool"/>
</or>
<or mandatory="true" name="Lifecycle_Support">
	<graphics key="collapsed" value="false"/>
	<feature name="RequirementsAnalysis"/>
	<feature name="ArchitectureDesign"/>
	<feature name="DetailedDesign"/>
	<feature name="Implementation"/>
	<feature name="TestingTool"/>
	<feature name="Maintenance"/>
</or>
</and>
<alt hidden="true" name="Design">
<graphics key="collapsed" value="true"/>
<alt name="Approach">
	<feature name="Separate"/>
	<feature name="CoDesign"/>
</alt>
<feature name="Viewpoint"/>
<feature name="Formalisms"/>
</alt>
<alt hidden="true" name="Stakeholder">
<graphics key="collapsed" value="true"/>
<feature name="SystemEngineer"/>
<feature name="Developer"/>
<feature name="EndUser"/>
<feature name="Customer"/>
<feature name="Maintainer"/>
<feature name="Evaluator"/>
<feature name="X_Stakeholder"/>
</alt>
<alt hidden="true" name="Model">
<description>
	Mathematical/computational abstraction that approximates the evolution,
	properties and relationships between elements of the system.
</description>
<graphics key="collapsed" value="false"/>
<alt name="Framework">
	<description>
		Modelling framework depending of the types of mathematical/
		computational objects and formalisation used:
	</description>
	<feature name="AgentBased">
		<description>Components are seen as non-dynamical agents.</description>
	</feature>
	<feature name="DifferentialEquation">
		<description>Continuous-time dynamical model.</description>
	</feature>
	<feature name="DifferenceEquation">
		<description>Discrete-time dynamical model.</description>
	</feature>
	<feature name="HybridAutomata">
		<description>
			A finite state automaton is a computational
			abstraction of the transitions of a system between discrete states
			or locations (on and off, for instance). A hybrid automaton, additionally,
			considers dynamical evolution over time in each location.
			This dynamical evolution is represented by a dynamical system.
			Each location represents an operation mode in a complex dynamical
			system, or multiple dynamical systems interacting to achieve
			a common goal. Depending on the nature of the dynamics of the
			system in each location, different types of hybrid automata are
			defined
		</description>
	</feature>
	<feature name="Bond graphs">
		<description>
			Graph representation of energy relationships in
			physical systems.
		</description>
	</feature>
	<feature name="Petri nets">
		<description>
			Modelling language for the description of dynamical
			discrete systems.
		</description>
	</feature>
	<feature name="Complex networks">
		<description>
			A complex network consists of a large number
			of interdependent systems connected in a non-trivial and nonregular
			manner. The interconnection of these systems produces
			emergent properties or behaviours which are not present in the
			individual systems: this is called self-organisation, collective behaviour.
			There are different models for complex networks. These
			models are typically based on graph theory (nodes connected with
			links). The main models for complex networks are: random-graph
			networks, small-world networks and scale-free networks. Each of
			these models have different topological (structural) features, analysed
			with tools from statistical physics.
		</description>
	</feature>
	<feature name="Complementarity">
		<description>
			Representation of a system by several incompatible
			descriptions that together can describe the full system.
		</description>
	</feature>
	<feature name="Bisimulations">
		<description>Binary relations between state transition systems.</description>
	</feature>
	<feature name="Symbolic dynamics">
		<description>
			Different formalisations of discrete-time
			dynamical systems with continuous state spaces.
		</description>
	</feature>
	<feature name="Event-flow formulas">
		<description>
			Formalisation of the continuous evolution
			of a system with discrete events (abrupt changes).
		</description>
	</feature>
	<feature name="OtherFramework">
		<description>
			There are many other modelling frameworks,
			as many as mathematical abstractions of dynamics.
		</description>
	</feature>
</alt>
<feature name="ParameterIdentification">
	<description>
		Process of calculating the parameters of a
		model of the system to reproduce key patterns or properties.
	</description>
</feature>
<feature name="Sampling">
	<description>
		Discretisation of a continuous-time system as a set of samples
		in discrete times.
	</description>
</feature>
<feature name="Simulating">
	<description>
		Reproduction of the behaviour of a system in a computer
		through a model of this system.
	</description>
</feature>
<feature name="SignalProcessing">
	<description>
		Set of mathematical/computational techniques/tools
		to generate, measure, transform, filter and visualise signals (states, inputs,
		outputs, disturbances) in a system.
	</description>
</feature>
</alt>
<and hidden="true" name="Verification">
<description>
	The process of checking that a property is met by a system.
	The verification process involves specifying the model of the system, specifying
	the property we wish it to conform to, and then checking if the model
	satisfies the desired property
</description>
<graphics key="collapsed" value="false"/>
<or mandatory="true" name="Property">
	<description>Types of properties to verify</description>
	<feature name="SafetyP">
		<description>Something bad will never happen in a system.</description>
	</feature>
	<feature name="Liveness">
		<description>
			Something good will eventually happen in a system. Liveness
			properties are characterised by the idea that, at any finite point
			in an execution, they could always be satisfied at some point in the
			future, or alternatively that the only type of execution which can
			disprove such a property is one of infinite length. Proposed by
			E.M. Navarro-López.
		</description>
	</feature>
	<feature name="Deadness">
		<description>To disprove a liveness property with a finite length path.</description>
	</feature>
	<feature name="Reachability">
		<description>
			To guarantee that the system trajectory will reach a
			subset of the state space
		</description>
	</feature>
	<feature name="Correctness"/>
</or>
<or mandatory="true" name="Technique">
	<description>Different types</description>
	<feature name="ModelChecking">
		<description>
			The model of the system is checked using algorithms
			to automatically test that it satisfies a desired specification
			(property).
		</description>
	</feature>
	<feature name="TheoremProving">
		<description>
			Deductive verification or theorem proving employs
			known axioms and rules to logically prove that a formal
			specification holds. The idea is to mimic how humans carry out
			mathematical proofs.
		</description>
	</feature>
	<feature name="Falsification">
		<description>
			To find bugs in the design rather than proving the
			correctness of the system. From a practical viewpoint, this verification
			technique provides counterexample trajectories - that is,
			trajectories violating a given property - in order to consider scenarios
			difficult to extract from simulations.
		</description>
	</feature>
	<feature name="ConstraintSatisfaction"/>
	<feature name="BooleanSatisfiability"/>
	<feature name="Satisfiability Modulo"/>
	<feature name="Symbolic Methods"/>
	<feature name="DynamicallyAware">
		<description>
			Verification guided by the dynamical
			properties of the system. Recent verification technique proposed
			by E.M. Navarro-López.
		</description>
	</feature>
</or>
</and>
</and>
</struct>
</featureModel>
