<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<featureModel>
	<properties>
		<graphics key="showhiddenfeatures" value="true"/>
		<graphics key="legendposition" value="643,40"/>
		<graphics key="legendautolayout" value="false"/>
		<graphics key="showshortnames" value="false"/>
		<graphics key="layout" value="vertical"/>
		<graphics key="showcollapsedconstraints" value="false"/>
		<graphics key="legendhidden" value="false"/>
		<graphics key="layoutalgorithm" value="4"/>
	</properties>
	<struct>
		<and mandatory="true" name="CPS">
			<and mandatory="true" name="ConstituentElement">
				<graphics key="collapsed" value="false"/>
				<feature mandatory="true" name="Cyber">
					<description>
						Communication and control between any human/biological/social system
						and any artificial device. It refers to systems where feedback is essential.
					</description>
				</feature>
				<and mandatory="true" name="Control">
					<description>The action of modifying the behaviour of a system through feedback.</description>
					<graphics key="collapsed" value="false"/>
					<feature mandatory="true" name="State">
						<description>Instrinsic configuration and description of the system.</description>
					</feature>
					<feature mandatory="true" name="Disturbance">
						<description>
							External influence of the environment in a system, typically
							unknown.
						</description>
					</feature>
					<feature mandatory="true" name="Input">
						<description>Abstraction of the external factors in a system influencing its behaviour.</description>
					</feature>
					<feature mandatory="true" name="Output">
						<description>Abstraction of the effect of a system on its environment.</description>
					</feature>
					<or mandatory="true" name="Goal">
						<description>Desired behaviour of a system.</description>
						<graphics key="collapsed" value="false"/>
						<feature name="Setpoint">
							<description>
								Goal that does not vary with time (typically a constant
								value).
							</description>
						</feature>
						<and name="Tracking">
							<description>
								Action to make the system follow a goal that varies with
								time.
							</description>
							<graphics key="collapsed" value="true"/>
							<alt mandatory="true" name="ValidityRegion">
								<description>
									· Local. It is only valid for a subset of the state space of the system.
									· Global. It is valid for all the state space where the system is defined
									(normally an Euclidean space)
									· Semiglobal. Partially global.
								</description>
								<feature name="Local">
									<description>It is only valid for a subset of the state space of the system.</description>
								</feature>
								<feature name="Global">
									<description>
										It is valid for all the state space where the system is defined
										(normally an Euclidean space)
									</description>
								</feature>
								<feature name="SemiGlobal">
									<description>Partially global.</description>
								</feature>
							</alt>
						</and>
						<feature name="Regulation">
							<description>Action to make the system to reach a set point.</description>
						</feature>
						<feature name="ReferenceSignal">
							<description>
								Desired value for the states and/or outputs of the
								system to reach.
							</description>
						</feature>
					</or>
					<and mandatory="true" name="Feedback">
						<description>
							Implementation of the control action by sensing the output of a
							system and modifying its input by means of actuators to meet a
							pre-defined control goal.
						</description>
						<graphics key="collapsed" value="false"/>
						<or mandatory="true" name="Dependency">
							<graphics key="collapsed" value="false"/>
							<feature name="StateFeedback">
								<description>
									Control action which is designed depending on
									the system states.
								</description>
							</feature>
							<feature name="OutputFeedback">
								<description>
									Control action which is designed depending
									on the system outputs.
								</description>
							</feature>
						</or>
						<alt mandatory="true" name="Scope">
							<feature name="Centralized">
								<description>
									The feedback is only applied on one element of the
									system, which controls the rest of the elements of the system.
								</description>
							</feature>
							<feature name="Decentralized">
								<description>
									The feedback is not applied in a centralised manner,
									there is no central authority.
								</description>
							</feature>
							<feature name="Distributfed">
								<description>
									The feedback is applied on the components of the
									system (it does not have to be all); some coordination of these
									parts has to be put in place.
								</description>
							</feature>
						</alt>
					</and>
					<or mandatory="true" name="Dynamics">
						<description>Evolution of a system over time</description>
						<graphics key="collapsed" value="false"/>
						<or name="SystemType">
							<description>
								Three main features to consider for the classification of
								systems:
								· Linearity: Linear, Nonlinear.
								· Time: DiscreteTime, ContinousTime.
								· Continuity: Smooth, Discontinuous. Discontinous or non-smooth
								systems present some type of discontinuity in the model representing
								the system. Different names are used depending of the type of
								discontinuity (the following names are not excluding each other,
								some of them are synonyms):
								Multi-modal systems. Systems with different modes, typically
								consisting of several dynamical systems interacting one with
								each other.
								Discrete-event systems. Systems including discrete events, abrupt
								changes.
								Transition systems. Systems with discrete transitions.
								Variable structure systems. Implicit in the name.
								Switched systems. Switched/switching systems are systems where
								the discontinuity is in the derivative of the state, that is, in the
								vector field defining the systems dynamics (for example, systems
								that switch between different operation modes with different
								dynamics in each mode and with the state space partitioned
								in different regions). In switched systems, the state space is
								divided into different regions separated by a discontinuity surface.
								The dynamics on the discontinuity surface It is typically
								undefined and different methods are used to define it, mainly
								Filipov’s continuation method and Utkin’s equivalent control
								method.
								Reset/jump/impulsive systems. Systems where the discontinuity
								is in the system state (for example, a bouncing ball).
								Piecewise-affine systems. System whose input space is partitioned,
								and consequently, it has different dynamics depending
								on the discontinuous input.
								Hybrid systems. Hybrid dynamical systems are systems combining
								continuous dynamics (either continuous time or discrete
								time) and discrete input or event-driven discrete state transitions.
								Indeed, the term ‘hybrid system’ from a dynamical viewpoint
								is more general than ‘discontinuous system’, since discontinuous
								systems are a subclass of hybrid systems.
								Other.
							</description>
							<alt name="Linearity">
								<feature name="Linear"/>
								<feature name="Non-linear"/>
							</alt>
							<alt name="Time">
								<feature name="Discrete Time"/>
								<feature name="Continuous Time"/>
							</alt>
							<alt name="Continuity">
								<feature name="Smooth"/>
								<and name="Discontiuous">
									<feature name="Multi-modal system"/>
									<feature name="Discrete-event System"/>
									<feature name="Transition system"/>
									<feature name="Varable structure system"/>
									<feature name="Switched system"/>
									<feature name="Reset system"/>
									<feature name="Jump system"/>
									<feature name="Impulsive system"/>
									<feature name="Piecewise-affine system"/>
									<feature name="Hybrid system"/>
									<feature name="Other"/>
								</and>
							</alt>
						</or>
						<and name="Behavior">
							<description>
								States of the system that represent set points. They can
								be:
								Common. A unique equilibrium for all the interacting dynamical
								systems in a more complex system.
								Multiple. Multiple different equilibria in the system.
							</description>
							<alt mandatory="true" name="Equilibria">
								<feature name="Common"/>
								<feature name="Multiple"/>
							</alt>
							<feature name="Bifurcations"/>
							<feature name="Oscillations/Limit cycles"/>
							<feature name="Hysteresis"/>
							<feature name="Complex/strange"/>
							<feature name="Chattering"/>
							<feature name="Sliding motions"/>
							<feature name="Phase transitions"/>
							<feature name="Zenoness"/>
							<alt mandatory="true" name="Emergent_Behavior">
								<graphics key="collapsed" value="false"/>
								<feature name="Collective"/>
								<feature name="Flocking"/>
								<feature name="Swarming"/>
								<feature name="Consensus"/>
								<feature name="Synchronisation"/>
								<feature name="SelfOrganisation"/>
								<feature name="CascadingDynamics"/>
								<feature name="Cooperation"/>
								<feature name="Competition"/>
								<feature name="SelfOrganisedCriticality"/>
							</alt>
						</and>
						<and name="Topology">
							<alt mandatory="true" name="Evolution">
								<feature name="Static"/>
								<feature name="Adaptive"/>
							</alt>
							<or mandatory="true" name="Implementation_">
								<feature name="Logical"/>
								<and name="Physcal_">
									<feature name="Component"/>
									<feature name="Connectors"/>
								</and>
							</or>
						</and>
					</or>
					<and mandatory="true" name="Properties">
						<description>
							Characteristics related to systems related to control.
							* Stability. Idea that a system trajectory will keep getting closer and
							closer to a desired point in space.
							* Dissipativity/Passivity. Abstraction of the energy properties of systems.
							A dissipative system dissipates energy in some manner.
							* Robustness. Ability of a system to keep performing well despite
							changes within and outside the system (for example, maintaining its
							trajectories close to equilibria despite perturbations). It does not entail
							adaptation.
							* Adaptation. Evolution/change over time depending on environment
							and system’s changes.
							* Controllability. A system is controllable if it can be controlled (its
							internal state can be modified) by modifying its inputs.
							* Observability. A system is observable if its internal state can be detected
							(observed) from its outputs.
							* Safety. Ability of a system to maintain a correct behaviour despite
							system faults (non-malicious).
							* Security. Ability of a system to maintain a correct behaviour despite
							malicious attacks.
							* Resilience. Ability of a system to maintain functionality by adaptation
							and recover when changes are produced within and outside the system.
							* Autonomy. Ability of a system to make decisions affecting its behaviour.
							* Intelligence. Ability to ‘think’ or automate tasks to achieve a goal.
							* Consistency. Property of logical systems by which it is not possible
							to find a contradiction within the system.
							* Heterogeneity. Being non-homogeneous.
							* Composability. Property of a system by which some property can be
							obtained by combining different components of the system.
							* Sensitivity. Level of response of a system to changes.
							* Learning. Ability to learn.
							* Uncertainty. The lack of certainty.
							Deterministic.
							Nondeterministic.
							Probabilistic.
							Stochastic.
						</description>
						<feature name="Stability"/>
						<feature name="Dissipativity/Passivity"/>
						<feature name="Robustness"/>
						<feature name="Adaptation"/>
						<feature name="Controllability"/>
						<feature name="Observability"/>
						<feature name="Resilience"/>
						<feature name="Autonomy"/>
						<feature name="Intelligence"/>
						<feature name="Consistency"/>
						<feature name="Heterogeneity"/>
						<feature name="Sensitivity"/>
						<feature name="Learning"/>
						<alt name="Uncertainty">
							<feature name="Deterministic"/>
							<feature name="Non-deterministic"/>
							<feature name="Probabilistic"/>
							<feature name="Stochastic"/>
						</alt>
					</and>
					<feature name="Diagnostics">
						<description>Identification of properties in a system.</description>
					</feature>
					<feature name="Prognostics">
						<description>
							Prediction of the time in the future when a system will not
							performed anymore as it is expected or for what it was designed (control
							goal).
						</description>
					</feature>
				</and>
				<or mandatory="true" name="Human">
					<description>
						Humans within a CPS perform certain roles within the CPS. Each
						role represents some capacity or position, where humans playing
						the role need to contribute for achieving certain behaviour goals
						set for the CPS. Each role is defined in terms of responsibilities and
						constraints pertaining to the role that are required for contributing
						to achieving the behaviour goals set for the CPS. Responsibilities
						are components of a role that determine what a human
						performing the role must do for the behaviour goals of the CPS to
						be achieved. Constraints are conditions that a human performing
						the role must take into consideration when exercising its
						responsibilities.
						Humans within a CPS exercise their responsibilities defined by
						roles by performing certain actions. Action is an entity that is
						targeted at changing the state of the CPS or environment. Actions
						are divided into physical actions, communicative actions, and
						epistemic actions. Physical action is a kind of action that changes
						the state of a physical element of the CPS or environment. A
						communicative action is a kind of action that sends a message
						(I think a message should be defined for CPS but currently it is
						not) through a communication network of the CPS. An epistemic
						action is a kind of action that changes the state of the data (I
						would rather use the term knowledge) held by the CPS. A human
						performs actions through actuators.
						A human can perceive events generated by the CPS or
						environment. An event is a kind of entity that is related to the
						states of affairs before and after it has occurred. A human
						perceives events through sensors. State of affairs is a collective
						state of the entities of the CPS and the environment. An entity is
						anything perceivable or conceivable (I think that entity should be
						defined for CPS at a higher level than under human).
					</description>
					<graphics key="collapsed" value="false"/>
					<and name="Role">
						<feature mandatory="true" name="Responsibilities"/>
						<feature mandatory="true" name="Constraints"/>
					</and>
					<and name="Event">
						<feature name="State-of-Affairs"/>
					</and>
					<feature name="Entity"/>
					<or name="Action">
						<feature name="CommunicationAction"/>
						<feature name="PhysicalAction"/>
						<feature name="EpistemicAction"/>
					</or>
				</or>
				<and mandatory="true" name="Network">
					<description>
						A set of elements (for example, nodes) connected in some physical or
						abstract manner (for example, links).
					</description>
					<graphics key="collapsed" value="false"/>
					<alt mandatory="true" name="Configuration">
						<feature name="Star"/>
						<feature name="Bus"/>
						<feature name="Ring"/>
						<feature name="Mesh"/>
						<feature name="Point2Point"/>
						<feature name="Hybrid"/>
					</alt>
					<and mandatory="true" name="Communication">
						<alt mandatory="true" name="ComType">
							<feature name="Synchronous"/>
							<feature name="Asynchronous"/>
						</alt>
						<alt mandatory="true" name="Protocol">
							<feature name="P2P"/>
							<feature name="ClientServer"/>
							<feature name="BrokerBased"/>
							<feature name="OtherProtocols"/>
						</alt>
					</and>
				</and>
				<and mandatory="true" name="Physical">
					<graphics key="collapsed" value="false"/>
					<feature mandatory="true" name="Sensor"/>
					<feature mandatory="true" name="Actuator"/>
					<feature mandatory="true" name="Plant"/>
					<feature mandatory="true" name="Controller"/>
					<feature mandatory="true" name="Environment"/>
				</and>
			</and>
			<or mandatory="true" name="nonfunctionalReqs">
				<graphics key="collapsed" value="false"/>
				<feature name="Performance"/>
				<feature name="Security"/>
				<feature name="Safety"/>
				<feature name="Reliability"/>
				<feature name="Efficiency"/>
				<alt name="Interoperability">
					<feature name="SyntacticInteroperability"/>
					<feature name="SemanticInteroperability"/>
				</alt>
				<feature name="Scalability"/>
				<feature name="Composability"/>
				<feature name="Availability"/>
				<feature name="Sustainability"/>
				<feature name="X_ilities"/>
			</or>
			<alt mandatory="true" name="ApplicationDomain">
				<graphics key="collapsed" value="true"/>
				<feature name="Health">
					<description>This is the description for health</description>
				</feature>
				<feature name="SmartManufacturing"/>
				<feature name="Transportation"/>
				<feature name="ProcessControl"/>
				<feature name="Defense"/>
				<feature name="BuildingAutomation"/>
				<feature name="RoboticforService"/>
				<feature name="CriticalInfrastructure"/>
				<feature name="EmergencyResponse"/>
				<feature name="X_Domain"/>
			</alt>
			<or mandatory="true" name="Disciplines">
				<graphics key="collapsed" value="true"/>
				<feature name="SoftwareEngineering"/>
				<feature name="MechanicalEngineering"/>
				<feature name="ElectricalEngineering"/>
				<feature name="CivilEngineering"/>
				<feature name="ChecmicalEngineering"/>
				<feature name="OtherEngineering"/>
			</or>
			<and mandatory="true" name="Architecture">
				<graphics key="collapsed" value="true"/>
				<feature mandatory="true" name="ManagementLayer"/>
				<feature mandatory="true" name="CPSComponentLayer"/>
				<feature mandatory="true" name="NetworkLayer"/>
				<feature mandatory="true" name="ServiceLayer"/>
				<feature mandatory="true" name="ApplicationLayer"/>
				<feature mandatory="true" name="SecurityLayer"/>
			</and>
			<or hidden="true" name="Evaluation">
				<graphics key="collapsed" value="true"/>
				<feature name="Simulation"/>
				<feature name="Experimentation"/>
				<feature name="Testing"/>
				<feature name="Formal_Verification"/>
				<feature name="OtherEvaluation"/>
			</or>
			<and hidden="true" name="Tool">
				<graphics key="collapsed" value="true"/>
				<or mandatory="true" name="Tool_Integration">
					<graphics key="collapsed" value="true"/>
					<feature name="Within_Domain"/>
					<feature name="Across_Domains"/>
				</or>
				<or mandatory="true" name="kind">
					<graphics key="collapsed" value="true"/>
					<feature name="CyberTool"/>
					<feature name="PhysicalTool"/>
					<feature name="HW_SW_CoDesignTool"/>
				</or>
				<or mandatory="true" name="Lifecycle_Support">
					<graphics key="collapsed" value="true"/>
					<feature name="RequirementsAnalysis"/>
					<feature name="ArchitectureDesign"/>
					<feature name="DetailedDesign"/>
					<feature name="Implementation"/>
					<feature name="TestingTool"/>
					<feature name="Maintenance"/>
				</or>
			</and>
			<alt hidden="true" name="Design">
				<graphics key="collapsed" value="true"/>
				<alt name="Approach">
					<feature name="Separate"/>
					<feature name="CoDesign"/>
				</alt>
				<feature name="Viewpoint"/>
				<feature name="Formalisms"/>
			</alt>
			<alt hidden="true" name="Stakeholder">
				<graphics key="collapsed" value="true"/>
				<feature name="SystemEngineer"/>
				<feature name="Developer"/>
				<feature name="EndUser"/>
				<feature name="Customer"/>
				<feature name="Maintainer"/>
				<feature name="Evaluator"/>
				<feature name="X_Stakeholder"/>
			</alt>
			<alt hidden="true" name="Model">
				<description>
					Mathematical/computational abstraction that approximates the evolution,
					properties and relationships between elements of the system.
				</description>
				<graphics key="collapsed" value="true"/>
				<alt name="Framework">
					<description>
						Modelling framework depending of the types of mathematical/
						computational objects and formalisation used:
					</description>
					<feature name="AgentBased">
						<description>Components are seen as non-dynamical agents.</description>
					</feature>
					<feature name="DifferentialEquation">
						<description>Continuous-time dynamical model.</description>
					</feature>
					<feature name="DifferenceEquation">
						<description>Discrete-time dynamical model.</description>
					</feature>
					<feature name="HybridAutomata">
						<description>
							A finite state automaton is a computational
							abstraction of the transitions of a system between discrete states
							or locations (on and off, for instance). A hybrid automaton, additionally,
							considers dynamical evolution over time in each location.
							This dynamical evolution is represented by a dynamical system.
							Each location represents an operation mode in a complex dynamical
							system, or multiple dynamical systems interacting to achieve
							a common goal. Depending on the nature of the dynamics of the
							system in each location, different types of hybrid automata are
							defined
						</description>
					</feature>
					<feature name="Bond graphs">
						<description>
							Graph representation of energy relationships in
							physical systems.
						</description>
					</feature>
					<feature name="Petri nets">
						<description>
							Modelling language for the description of dynamical
							discrete systems.
						</description>
					</feature>
					<feature name="Complex networks">
						<description>
							A complex network consists of a large number
							of interdependent systems connected in a non-trivial and nonregular
							manner. The interconnection of these systems produces
							emergent properties or behaviours which are not present in the
							individual systems: this is called self-organisation, collective behaviour.
							There are different models for complex networks. These
							models are typically based on graph theory (nodes connected with
							links). The main models for complex networks are: random-graph
							networks, small-world networks and scale-free networks. Each of
							these models have different topological (structural) features, analysed
							with tools from statistical physics.
						</description>
					</feature>
					<feature name="Complementarity">
						<description>
							Representation of a system by several incompatible
							descriptions that together can describe the full system.
						</description>
					</feature>
					<feature name="Bisimulations">
						<description>Binary relations between state transition systems.</description>
					</feature>
					<feature name="Symbolic dynamics">
						<description>
							Different formalisations of discrete-time
							dynamical systems with continuous state spaces.
						</description>
					</feature>
					<feature name="Event-flow formulas">
						<description>
							Formalisation of the continuous evolution
							of a system with discrete events (abrupt changes).
						</description>
					</feature>
					<feature name="OtherFramework">
						<description>
							There are many other modelling frameworks,
							as many as mathematical abstractions of dynamics.
						</description>
					</feature>
				</alt>
				<feature name="ParameterIdentification">
					<description>
						Process of calculating the parameters of a
						model of the system to reproduce key patterns or properties.
					</description>
				</feature>
				<feature name="Sampling">
					<description>
						Discretisation of a continuous-time system as a set of samples
						in discrete times.
					</description>
				</feature>
				<feature name="Simulating">
					<description>
						Reproduction of the behaviour of a system in a computer
						through a model of this system.
					</description>
				</feature>
				<feature name="SignalProcessing">
					<description>
						Set of mathematical/computational techniques/tools
						to generate, measure, transform, filter and visualise signals (states, inputs,
						outputs, disturbances) in a system.
					</description>
				</feature>
			</alt>
			<and hidden="true" name="Verification">
				<description>
					The process of checking that a property is met by a system.
					The verification process involves specifying the model of the system, specifying
					the property we wish it to conform to, and then checking if the model
					satisfies the desired property
				</description>
				<graphics key="collapsed" value="true"/>
				<or mandatory="true" name="Property">
					<feature name="SafetyP">
						<description>Something bad will never happen in a system.</description>
					</feature>
					<feature name="Liveness">
						<description>
							Something good will eventually happen in a system. Liveness
							properties are characterised by the idea that, at any finite point
							in an execution, they could always be satisfied at some point in the
							future, or alternatively that the only type of execution which can
							disprove such a property is one of infinite length. Proposed by
							E.M. Navarro-López.
						</description>
					</feature>
					<feature name="Deadness">
						<description>To disprove a liveness property with a finite length path.</description>
					</feature>
					<feature name="Reachability">
						<description>
							To guarantee that the system trajectory will reach a
							subset of the state space
						</description>
					</feature>
					<feature name="Correctness"/>
				</or>
				<or mandatory="true" name="Technique">
					<feature name="ModelChecking">
						<description>
							The model of the system is checked using algorithms
							to automatically test that it satisfies a desired specification
							(property).
						</description>
					</feature>
					<feature name="TheoremProving">
						<description>
							Deductive verification or theorem proving employs
							known axioms and rules to logically prove that a formal
							specification holds. The idea is to mimic how humans carry out
							mathematical proofs.
						</description>
					</feature>
					<feature name="Falsification">
						<description>
							To find bugs in the design rather than proving the
							correctness of the system. From a practical viewpoint, this verification
							technique provides counterexample trajectories - that is,
							trajectories violating a given property - in order to consider scenarios
							difficult to extract from simulations.
						</description>
					</feature>
					<feature name="ConstraintSatisfaction"/>
					<feature name="BooleanSatisfiability"/>
					<feature name="Satisfiability Modulo"/>
					<feature name="Symbolic Methocs"/>
					<feature name="DynamicallyAware">
						<description>
							Verification guided by the dynamical
							properties of the system. Recent verification technique proposed
							by E.M. Navarro-López.
						</description>
					</feature>
				</or>
			</and>
		</and>
	</struct>
</featureModel>
